[["index.html", "UK Biobank Phenotyping Generating time-to-event data using UK biobank data", " UK Biobank Phenotyping Do Hyun Kim 2022-04-02 Generating time-to-event data using UK biobank data This repository presents steps for generating time-to-diabetes-complication-event data using UK biobank data. The following are the outcomes we phenotyped: Diabetes Myocardial Infarction Unstable Angina Ischemic Stroke Hemorrhagic Stroke Stroke Percutaneous Coronary Intervention (PCI) Compositie cardiovascular disease (CVD) Diabetic Eye Disease or Diabetic Retinopathy (DR) Chronic/Diabetic Kidney Disease (CKD/DKD) "],["reformat-raw-data.html", "1 Clean raw UKB assesment center data", " 1 Clean raw UKB assesment center data We reformat raw UKB assessment center data for easier data wrangling downstream. The scripts ending with .r contain reformatting instructions, and running these scripts reformats the data. These scripts reside in raw_data folder. These scripts were first auto-generated using the ukbconv utility, which automatically applies encodings to data fields. This program can be obtained from the download section of the UKB showcase website. We used the ukbconv -i flag to specify a subset of fields to be included in each dataset. For further details on downloading, decrypting, and converting the format of your main dataset(s), see UK Biobank’s insructions. We slightly modified these scripts to use a faster reading function (fread() from data.table), rather than the default read.table(), and to change the name of the R objects storing each dataset (from “bd” to something descriptive of the contents of the dataset). library(tidyverse) library(data.table) Execute the reformatting scripts. source(&quot;raw_data/demog_UKB_MOD.r&quot;) source(&quot;raw_data/assessment_center_UKB.r&quot;) source(&quot;raw_data/first_occurrences_UKB_MOD.r&quot;) source(&quot;raw_data/ICD_UKB_MOD.r&quot;) source(&quot;raw_data/OPCS_procedures_UKB_MOD.r&quot;) source(&quot;raw_data/sampleQC_UKB_MOD.r&quot;) source(&quot;raw_data/labs_UKB_MOD.r&quot;) Save reformatted UKB assessment center data saveRDS(demog,&quot;generated_data/demog_UKB.RDS&quot;) saveRDS(bd,&quot;generated_data/assessment_center_UKB.RDS&quot;) saveRDS(firstoccurs,&quot;generated_data/first_occur_UKB.RDS&quot;) saveRDS(procs,&quot;generated_data/OPCS_procedures_UKB.RDS&quot;) saveRDS(ICD,&quot;generated_data/ICD_UKB.RDS&quot;) saveRDS(sampleqc,&quot;generated_data/sampleQC_UKB.RDS&quot;) saveRDS(labs,&quot;generated_data/labs_UKB.RDS&quot;) "],["curate-demog-table.html", "2 Curate demographic table", " 2 Curate demographic table We curate demographic information such as the date of birth, age at the study initiation and censored date which will be used in defining time-to-event outcome. library(tidyverse) library(data.table) library(lubridate) Demographic data contain a number of fields. We are only interested in several of them and want to further define a few more fields that will be used later in generating time-to-event data. Load formatted raw demographic data demog &lt;- readRDS(&quot;generated_data/demog_UKB.RDS&quot;) Define the date of birth and gender demog &lt;- demog %&gt;% rename(YOB = f.34.0.0) %&gt;% rename(MOB = f.52.0.0) %&gt;% mutate(DOB = lubridate::make_date(YOB, MOB)) %&gt;% mutate(SEX = as.character(f.31.0.0)) Define UKB study initiation date demog &lt;- demog %&gt;% rename(date_init = f.53.0.0, date_repeat = f.53.1.0) Define administrative censoring date (study end date) based on inpatient record origin. These dates are updated periodically. The most recent censoring dates can be found here in the “Showcase censoring date” field of the table under the “Hospital inpatient data” section. The below censoring dates were based on the page accessed on Feb 22 2022. We will define dictionary that will be used to match hospital admission keys to admin censoring dates, and the mapping from country to administrative censoring date: Patient Episode Database for Wales (PEDW): Feb 28 2018 Scottish Morbidity Record (SMR): Jul 31 2021 Hospital Episode Statistics for England (HES): Sep 30 2021 censor_dates &lt;- c(PEDW = as.Date(&quot;2018-02-28&quot;), SMR = as.Date(&quot;2021-07-31&quot;), HES = as.Date(&quot;2021-09-30&quot;)) country_to_censor_date_mapping &lt;- c(wal = as.Date(&quot;2018-02-28&quot;), scot = as.Date(&quot;2021-07-31&quot;), eng = as.Date(&quot;2021-09-30&quot;)) demog &lt;- demog %&gt;% mutate(date_admin_censored = as.Date(pmin(censor_dates[f.40022.0.0], censor_dates[f.40022.0.1],censor_dates[f.40022.0.2],na.rm=T))) Note that there are subjects with unknown administrative censored date (i.e., no inpatient record). demog %&gt;% filter(is.na(date_admin_censored)) %&gt;% select(f.eid) %&gt;% nrow() We will fill these values using the data field 54 of UKB assessment center data. These fields include which city each participant went in for assessment or imaging, and can indicate where we would expect their inpatient record to originate. Load the data containing the field 54. Patient eids are displayed as Inf for privacy reasons. bd &lt;- readRDS(&quot;generated_data/assessment_center_UKB.RDS&quot;) bd %&gt;% head() %&gt;% mutate(f.eid = Inf) The field “f.54.0.0” contains codes indicating the city where the initial assessment was taken. We see that there is only one subject that is missing this value. rmid &lt;- bd %&gt;% filter(is.na(f.54.0.0)) rmid %&gt;% mutate(f.eid = Inf) This subject does exist in demographic table but all of the fields are missing except for the participant’s ID. demog %&gt;% right_join(rmid) %&gt;% as_vector() %&gt;% .[-1] %&gt;% is.na %&gt;% all Remove this subject from the demographic table demog &lt;- demog %&gt;% anti_join(rmid) Now, we will use the values in the field “f.54.0.0” to find out which city and in turn which country a participant went in for initial assessment. First, load the mapping file from city code to city name. code_to_city_mapping &lt;- read_tsv(&quot;raw_data/f.54.0.0_coding.tsv&quot;) Second, define the mapping from city name to country name. city_to_country_map &lt;- c(Glasgow = &quot;scot&quot;, Edinburgh = &quot;scot&quot;, Newcastle = &quot;eng&quot;, Middlesborough = &quot;eng&quot;, Leeds = &quot;eng&quot;, Sheffield = &quot;eng&quot;, Bury = &quot;eng&quot;, Liverpool = &quot;eng&quot;, Manchester = &quot;eng&quot;, &quot;Stockport (pilot)&quot; = &quot;eng&quot;, Stoke = &quot;eng&quot;, Nottingham = &quot;eng&quot;, Birmingham = &quot;eng&quot;, Oxford = &quot;eng&quot;, Reading = &quot;eng&quot;, Hounslow = &quot;eng&quot;, &quot;Central London&quot; = &quot;eng&quot;, Croydon = &quot;eng&quot;, Bristol = &quot;eng&quot;, Wrexham = &quot;wal&quot;, Swansea = &quot;wal&quot;, Cardiff = &quot;wal&quot;, Barts = &quot;eng&quot;) # hosptial in england Finally, using defined mappings, we fill in missing administrative censoring dates. demog &lt;- demog %&gt;% left_join(bd %&gt;% select(f.eid,`f.54.0.0`)) %&gt;% rename(coding = `f.54.0.0`) %&gt;% left_join(code_to_city_mapping, by = &quot;coding&quot;) %&gt;% mutate(country = city_to_country_map[meaning]) %&gt;% mutate(date_admin_censored = if_else(!is.na(date_admin_censored),date_admin_censored, country_to_censor_date_mapping[country])) attr(demog$date_admin_censored,&quot;names&quot;) &lt;- NULL Load reformatted raw ICD table ICD &lt;- readRDS(&quot;generated_data/ICD_UKB.RDS&quot;) Define: date of death date of lost-to-follow-up age at study initiation date age at second-visit date date censored date_death_tab &lt;- ICD %&gt;% select(f.eid, f.40000.0.0) %&gt;% arrange(f.eid) %&gt;% data.frame() demog &lt;- demog %&gt;% left_join(date_death_tab, by = &quot;f.eid&quot;) %&gt;% rename(date_death = &quot;f.40000.0.0&quot;) %&gt;% rename(date_lost_fu = &quot;f.191.0.0&quot;) demog &lt;- demog %&gt;% mutate(age_init = decimal_date(date_init) - decimal_date(DOB), age_repeat = decimal_date(date_repeat) - decimal_date(DOB)) %&gt;% mutate(date_censored = pmin(date_admin_censored,date_lost_fu,date_death,na.rm = T)) Select needed columns from demographic table demog_sel &lt;- demog %&gt;% select(f.eid,DOB,SEX, age_init,age_repeat, date_init,date_repeat, date_censored) Save demographic table. Note that this table includes subjects with genetic and reported sex mismatch saveRDS(demog_sel,&quot;generated_data/pre_demog_sel.RDS&quot;) "],["curate-all-ukb_events-table.html", "3 Curate all UKB events table", " 3 Curate all UKB events table UK Biobank assessment center data (or in short UKB data) are in the wide format where each field represents some event. We identify what events these fields represent in here. Generated file: pre_all_ukb_events_tab.RDS We use the following types of fields first occurrence fields in the first occurrence event table algorithmically defined outcome fields: f.42000.0.0 f.42008.0.0 f.42010.0.0 f.42012.0.0 f.42006.0.0 f.42026.0.0 ICD10 code fields and their date fields: starts with f.41270 (ICD10 code) starts with f.41280 (ICD10 code event date) starts with f.40001 (ICD10 code primary death) starts with f.40002 (ICD10 code secondary death) starts with f.40000 (ICD10 code death date) OPCS4 code fields starts with f.41272 (OPCS4 code) starts with f.41282 (OPCS4 code event date) Self-reported condition field starts with f.20002 (self-reported condition code) starts with f.20008 (self-reported condition code event date) Self-reported operation field starts with f.20004 (self-reported operation code) starts with f.20010 (self-reported operation code event date) Once we have collected the tables containing these fields, we convert them into a long format and merge them together to create a master UKB event table. We can then simply search different fields and/or code patterns in the master event table to curate an event table of interest. The fields and/or codes we can specify to search in the master event table are: first occurrence field patterns algorithmically defined outcome field patterns ICD10 code patterns OPCS4 code patterns Self-reported condition code patterns Self-reported operation code patterns Custom field patterns Note that custom field is user defined field that combines multiple fields. For example, dr_self field considers the following fields: f.5901.0.0 f.5901.1.0 f.5901.2.0 f.5901.3.0 These fields record age at which diabetic eye disease was diagnosed at four different time points. Using this information and the date of birth of subjects we define the first occurrence event date for this outcome. Currently, dr_self is the only custom field that exists in the master event table. We also converted the special dates using predefined mapping. The special dates and their mappings: For first occurrence, algorithimically defined outcome and OPC4 code event date fields: Special date Map 1900-01-01 Missing 1901-01-01 Missing 2037-07-07 Missing 1902-02-02 DOB of a subject 1903-03-03 DOB of a subject For self-reported condition and self-reported operation code event date fields: Special date Map decimal date &lt; 1900 Missing Generated file library(tidyverse) library(data.table) library(lubridate) source(&quot;functions.R&quot;) This step compiles all UKB events table that will be used in phenotyping diabetes and diabetes-related complications. Here, we accomplish: Gather different types of event tables and generate a master event table in a long format Convert UKB defined special dates to normal dates for outcome event dates Load reformatted raw UKB assessment data needed generate a master event table firstoccurs &lt;- readRDS(&quot;generated_data/first_occur_UKB.RDS&quot;) ICD &lt;- readRDS(&quot;generated_data/ICD_UKB.RDS&quot;) procs &lt;- readRDS(&quot;generated_data/OPCS_procedures_UKB.RDS&quot;) demog &lt;- readRDS(&quot;generated_data/demog_UKB.RDS&quot;) Define the date of birth and gender demog &lt;- demog %&gt;% rename(YOB = f.34.0.0) %&gt;% rename(MOB = f.52.0.0) %&gt;% mutate(DOB = lubridate::make_date(YOB, MOB)) %&gt;% mutate(SEX = as.character(f.31.0.0)) "],["first-occurrence-event-table-and-algorithmically-defined-outcome-table.html", "3.1 First occurrence event table and algorithmically defined outcome table", " 3.1 First occurrence event table and algorithmically defined outcome table Convert first occurrence data into a long format firstoccurs_long &lt;- firstoccurs %&gt;% pivot_longer(-f.eid, names_to = &quot;field&quot;, values_to = &quot;event_dt&quot;, values_drop_na = T) Obtain algorithmically defined outcomes from demographic dataset. algo_outcome_fields &lt;- paste0(&quot;f.&quot;,c(&quot;42000&quot;, &quot;42008&quot;, &quot;42010&quot;,&quot;42012&quot;,&quot;42006&quot;, &quot;42026&quot;),&quot;.0.0&quot;) algo_outcome_table_wide &lt;- demog %&gt;% select(f.eid,all_of(algo_outcome_fields)) algo_outcome_table_long &lt;- algo_outcome_table_wide %&gt;% pivot_longer(-f.eid,names_to = &quot;field&quot;,values_to = &quot;event_dt&quot;, values_drop_na = T) Merge algorithmically defined outcome fields in the demographic data with first occurrence data to produce outcome fields table outcome_fields_table_long &lt;- bind_rows(firstoccurs_long,algo_outcome_table_long) "],["custom-defined-outcome-for-dr.html", "3.2 Custom defined outcome for DR", " 3.2 Custom defined outcome for DR Define customized outcome of diabetes-related eye disease using demographic dataset. We use fields 5901 family which includes: f.5901.0.0 f.5901.1.0 f.5901.2.0 f.5901.3.0 These fields record age at which DR was diagnosed at four different time points. Here are the steps for defining the first occurrence event data for this outcome : Negative values that indicate incidence but unknown date of the event is converted to a numeric value 999. dr_self = 1 if the event happened, or 0 otherwise. age_dr_self: We take the youngest age at which a person was identified as having DR, and individuals with unknown date of this event is coded as NA. If age is greater than 998, then we are uncertain of when the outcome was actually identified, so they are converted back to NA. dr_self is set to NA for individuals who were identified to have an outcome but with missing age when the outcome was identified. We add DOB and age when the outcome was identified to obtain the date of an event. custom_outcome_fields_table_wide &lt;- demog %&gt;% mutate(f.5901.0.0 = replace(f.5901.0.0, which(f.5901.0.0 &lt; 0), 999)) %&gt;% mutate(f.5901.1.0 = replace(f.5901.1.0, which(f.5901.1.0 &lt; 0), 999)) %&gt;% mutate(f.5901.2.0 = replace(f.5901.2.0, which(f.5901.2.0 &lt; 0), 999)) %&gt;% mutate(f.5901.3.0 = replace(f.5901.3.0, which(f.5901.3.0 &lt; 0), 999)) %&gt;% mutate(dr_self = as.numeric(!is.na(f.5901.0.0) | !is.na(f.5901.1.0) | !is.na(f.5901.2.0) | !is.na(f.5901.3.0))) %&gt;% mutate(age_dr_self = pmin(f.5901.0.0, f.5901.1.0, f.5901.2.0, f.5901.3.0, na.rm=T)) %&gt;% mutate(age_dr_self = replace(age_dr_self, which(age_dr_self &gt; 998), NA)) %&gt;% mutate(dr_self = replace(dr_self, which(is.na(age_dr_self) &amp; dr_self==1), NA)) %&gt;% mutate(date_dr_self = as.Date(date_decimal(decimal_date(DOB) + age_dr_self))) %&gt;% select(f.eid,date_dr_self) custom_outcome_fields_table_long &lt;- custom_outcome_fields_table_wide %&gt;% pivot_longer(-f.eid, names_to = &quot;field&quot;, values_to = &quot;event_dt&quot;, values_drop_na = T) custom_outcome_fields_table_long &lt;- custom_outcome_fields_table_long %&gt;% mutate(field = ifelse(field == &quot;date_dr_self&quot;, &quot;dr_self&quot;, field)) "],["icd-9-10.html", "3.3 ICD 9 &amp; 10", " 3.3 ICD 9 &amp; 10 Obtain relevant fields ICD9_codes &lt;- ICD %&gt;% select(f.eid,starts_with(&#39;f.41271&#39;)) %&gt;% arrange(f.eid) %&gt;% data.frame() ICD9_dates &lt;- ICD %&gt;% select(f.eid,starts_with(&#39;f.41281.&#39;)) %&gt;% arrange(f.eid) %&gt;% data.frame() ICD10_codes &lt;- ICD %&gt;% select(f.eid,starts_with(&#39;f.41270&#39;)) %&gt;% arrange(f.eid) %&gt;% data.frame() ICD10_dates &lt;- ICD %&gt;% select(f.eid,starts_with(&#39;f.41280.&#39;)) %&gt;% arrange(f.eid) %&gt;% data.frame() ICD10_codes_primary_death &lt;- ICD %&gt;% select(f.eid,starts_with(&#39;f.40001&#39;)) %&gt;% arrange(f.eid) %&gt;% data.frame() ICD10_codes_secondary_death &lt;- ICD %&gt;% select(f.eid,starts_with(&#39;f.40002&#39;)) %&gt;% arrange(f.eid) %&gt;% data.frame() ICD10_death_date &lt;- ICD %&gt;% select(f.eid, f.40000.0.0) %&gt;% arrange(f.eid) %&gt;% data.frame() Merge ICD10 primary death and death date tables into a long format ICD10_codes_primary_death_long &lt;- left_join(ICD10_codes_primary_death %&gt;% pivot_longer(cols=-f.eid),ICD10_death_date,by=&quot;f.eid&quot;) %&gt;% select(-name) %&gt;% rename(code=value,event_dt=`f.40000.0.0`) %&gt;% mutate(type=&quot;ICD10_death_primary&quot;) %&gt;% distinct() Merge ICD10 secondary death and death date tables into a long format ICD10_codes_secondary_death_long &lt;- left_join(ICD10_codes_secondary_death %&gt;% pivot_longer(cols=-f.eid),ICD10_death_date,by=&quot;f.eid&quot;) %&gt;% select(-name) %&gt;% rename(code=value,event_dt=`f.40000.0.0`) %&gt;% mutate(type=&quot;ICD10_death_secondary&quot;) %&gt;% distinct() Merge ICD10 codes and their event dates tables into a long format ICD10_codes_long &lt;- merge_long(&quot;f.41270&quot;,&quot;f.41280&quot;,ICD10_codes,ICD10_dates,&quot;ICD10&quot;) %&gt;% distinct() Merge ICD9 codes and their event dates tables into a long format ICD9_codes &lt;- ICD9_codes %&gt;% mutate_at(vars(f.41271.0.0:f.41271.0.46), as.character) ICD9_codes_long &lt;- merge_long(&quot;f.41271&quot;,&quot;f.41281&quot;,ICD9_codes,ICD9_dates,&quot;ICD9&quot;) %&gt;% distinct() Merge all of the ICD event tables with dates, and then remove observations with no codes (code == NA). ICD_codes_full &lt;- do.call(rbind,list(ICD10_codes_long,ICD9_codes_long,ICD10_codes_primary_death_long,ICD10_codes_secondary_death_long)) %&gt;% filter(!is.na(code)) "],["opcs4.html", "3.4 OPCS4", " 3.4 OPCS4 OPCS4 event table is procedure codes from hospital admission data. OPCS4 &lt;- procs %&gt;% select(c(f.eid, starts_with(&#39;f.41272.&#39;))) %&gt;% mutate_if(is.factor, as.character) %&gt;% arrange(f.eid) %&gt;% data.frame() OPCS4dates &lt;- procs %&gt;% select(c(f.eid, starts_with(&#39;f.41282.&#39;))) %&gt;% arrange(f.eid) %&gt;% data.frame() OPCS4_codes_long &lt;- merge_long(&quot;f.41272&quot;,&quot;f.41282&quot;,OPCS4,OPCS4dates,&quot;OPCS4&quot;) %&gt;% distinct() %&gt;% filter(!is.na(code)) "],["medical-conditions-self-report-ukb.html", "3.5 Medical conditions self-report UKB", " 3.5 Medical conditions self-report UKB selfrep_codes &lt;- demog %&gt;% select(c(f.eid, starts_with(&quot;f.20002.&quot;))) %&gt;% arrange(f.eid) %&gt;% data.frame() # can&#39;t be data.table selfrep_dates &lt;- demog %&gt;% select(c(f.eid, starts_with(&quot;f.20008.&quot;))) %&gt;% data.frame() %&gt;% mutate_all(funs(replace(., .&lt;1900, NA))) %&gt;% # it looks like this step got rid of unknown date of an outcome event mutate_at(vars(starts_with(&quot;f.20008.&quot;)), .funs = list(~ lubridate::date_decimal(.))) %&gt;% mutate_at(vars(starts_with(&quot;f.20008.&quot;)), .funs = list(~ as.Date(.))) %&gt;% arrange(f.eid) selfrep_codes_long &lt;- merge_long(&quot;f.20002&quot;,&quot;f.20008&quot;,selfrep_codes,selfrep_dates,&quot;selfrep&quot;) %&gt;% distinct() %&gt;% filter(!is.na(code)) "],["self-reported-operations-ukb.html", "3.6 Self-reported operations UKB", " 3.6 Self-reported operations UKB selfrep_op_codes &lt;- demog %&gt;% select(c(f.eid, starts_with(&quot;f.20004.&quot;))) %&gt;% arrange(f.eid) %&gt;% data.frame() selfrep_op_dates &lt;- demog %&gt;% select(c(f.eid, starts_with(&quot;f.20010.&quot;))) %&gt;% data.frame() %&gt;% mutate_all(funs(replace(., .&lt;1900, NA))) %&gt;% # it looks like this step got rid of unknown date of an outcome event mutate_at(vars(starts_with(&quot;f.20010.&quot;)), .funs = list(~ lubridate::date_decimal(.))) %&gt;% mutate_at(vars(starts_with(&quot;f.20010.&quot;)), .funs = list(~ as.Date(.))) %&gt;% arrange(f.eid) selfrep_op_codes_long &lt;- merge_long(&quot;f.20004&quot;,&quot;f.20010&quot;,selfrep_op_codes,selfrep_op_dates,&quot;selfrep_op&quot;) %&gt;% distinct() %&gt;% filter(!is.na(code)) "],["standardize-and-merge-event-tables.html", "3.7 Standardize and merge event tables", " 3.7 Standardize and merge event tables The following event tables are merged to produce a master event table of UKB assessment data: Outcome field event table (combination of first occurrence event data and algorithmically defined event data from demographic table) ICD10 code event table OPCS4 code event table Self-reported condition code event table Self-reported operation code event table Custom defined event table for DR # Standardize outcome_fields_table_long &lt;- outcome_fields_table_long %&gt;% mutate(type = &quot;outcome_fields&quot;) %&gt;% rename(key=field) ICD_codes_full &lt;- ICD_codes_full %&gt;% mutate(code=as.character(code)) %&gt;% rename(key=code) OPCS4_codes_long &lt;- OPCS4_codes_long %&gt;% rename(key=code) selfrep_codes_long &lt;- selfrep_codes_long %&gt;% mutate(code=as.character(code)) %&gt;% rename(key=code) selfrep_op_codes_long &lt;- selfrep_op_codes_long %&gt;% mutate(code=as.character(code)) %&gt;% rename(key=code) custom_outcome_fields_table_long &lt;- custom_outcome_fields_table_long %&gt;% mutate(type = &quot;custom_fields&quot;) %&gt;% rename(key = field) event_tab &lt;- bind_rows(list(outcome_fields_table_long,ICD_codes_full, OPCS4_codes_long,selfrep_codes_long,selfrep_op_codes_long, custom_outcome_fields_table_long)) Filter out events where the date of event is missing event_tab &lt;- event_tab %&gt;% filter(!is.na(event_dt)) "],["convert-ukb-special-dates-into-normal-dates.html", "3.8 Convert UKB special dates into “normal” dates", " 3.8 Convert UKB special dates into “normal” dates Convert special dates to normal dates, and then filter out any event with an unknown event date. Note that special dates in self-reported and self-reported operation and custom defined outcome table have already been converted in the above. We convert special dates present in the following event table types: outcome_fields, ICD10, ICD10_death_primary, ICD10_death_secondary and OPCS4. demog_dob &lt;- demog %&gt;% select(f.eid, DOB) event_tab &lt;- event_tab %&gt;% left_join(demog_dob, by = &quot;f.eid&quot;) event_tab$event_dt &lt;- cleandates(event_tab$event_dt,event_tab$DOB) event_tab &lt;- event_tab %&gt;% select(-DOB) %&gt;% filter(!is.na(event_dt)) Save all UKB events table. Note that this table includes subjects with genetic and reported sex mismatch saveRDS(event_tab,&quot;generated_data/pre_all_ukb_events_tab.RDS&quot;) "],["exclude-sex-mismatch-subjects.html", "4 Filter out subjects with sex mismatch", " 4 Filter out subjects with sex mismatch We exclude any subjects who have mismatch between self-reported sex and genetically determined sex from both processed demographic data and the master event table. The IDs of subjects with sex mismatch will be generated and later be used in preparing a primary care data in prep_pcp_data. Generated files: sex_mismatch_subject_ids.RDS demog_selected.RDS all_ukb_events_tab.RDS library(tidyverse) library(data.table) library(lubridate) We remove any subjects from the final demographics table as well as final master event table. Load the reformatted UKB assessment center data containing information about subject’s sex determined by genetics. The object name of the dataset is sampleqc. The column name containing the genetically determined sex of subjects is genetic_sex. sampleqc &lt;- readRDS(&quot;generated_data/sampleQC_UKB.RDS&quot;) Load curated all ukb events table and demographic table pre_demog_sel &lt;- readRDS(&quot;generated_data/pre_demog_sel.RDS&quot;) pre_all_ukb_events_tab &lt;- readRDS(&quot;generated_data/pre_all_ukb_events_tab.RDS&quot;) Get subject IDs that should be excluded because of mismatch in self-reported sex and genetically determined sex. Note that everyone in demographics table has self-reported sex information. # this filtering step does not filter out # any subject with missing genetically determined sex information sex_mismatch_subject_ids &lt;- pre_demog_sel %&gt;% select(f.eid,SEX) %&gt;% full_join(sampleqc %&gt;% select(f.eid,genetic_sex)) %&gt;% filter(SEX != genetic_sex) %&gt;% .$f.eid Filter demographic table demog_sel &lt;- pre_demog_sel %&gt;% filter(!(f.eid %in% sex_mismatch_subject_ids)) Filter master event table all_ukb_events_tab &lt;- pre_all_ukb_events_tab %&gt;% filter(!(f.eid %in% sex_mismatch_subject_ids)) saveRDS(sex_mismatch_subject_ids,&quot;generated_data/sex_mismatch_subject_ids.RDS&quot;) saveRDS(demog_sel,&quot;generated_data/demog_selected.RDS&quot;) saveRDS(all_ukb_events_tab,&quot;generated_data/all_ukb_events_tab.RDS&quot;) "],["prep_pcp_data.html", "5 Prepare UKB Primary Care Data", " 5 Prepare UKB Primary Care Data The priamry care data contain information about 500,000 patients on their visits to primary care physicians. A reason for a visit is recorded as a code. The date of visit associated with the code is also available. We achieve the following in this folder: Convert date field to date class Convert special dates to their mapping Generate subject ID file (used later for excluding control subjects when phenotyping DR and CKD) Exclude subjects with sex mismatch The special dates and their mappings are: Special date Map 1900-01-01 Missing 1901-01-01 Missing 2037-07-07 Missing 1902-02-02 DOB of a subject 1903-03-03 DOB of a subject As we did in 4, we exclude any subjects who have mismatch between self-reported sex and genetically determined sex from the primary care data. However, one can check that the number of unique subjects remain the same after applying sex mismatch filtering. Input and output files: Input: sex_mismatch_subject_ids.RDS (from 4) demog_selected.RDS (from 2 entire_gp_clinical_30March2021.txt (from raw_data folder. This table can be downloaded by approved researchers from the UKB Record Repository if you have requested field 42040.) Output: entire_gp_clinical_30March2021_formatted.txt gp_subject_ids.RDS This step cleans primary care table gp_clinical on March 31, 2021. Reformatted primary care table will be used for phenotyping diabetes, and diabetes complications outcomes. library(data.table) library(tidyverse) source(&quot;functions.R&quot;) Import primary care data gp_clinical &lt;- fread(&quot;raw_data/entire_gp_clinical_30March2021.txt&quot;) Fix the date format so that other scripts can use it more easily. gp_clinical$event_dt &lt;- as.Date(gp_clinical$event_dt, tryFormats = &quot;%d/%m/%Y&quot;) Create code and terminology fields in place of read_2 and read_3 fields: gp_clinical &lt;- gp_clinical %&gt;% mutate(code = ifelse(read_2 != &quot;&quot;, read_2, read_3)) %&gt;% mutate(terminology = ifelse(read_2 != &quot;&quot;, &quot;read2&quot;, &quot;read3&quot;)) %&gt;% select(-read_2, -read_3) %&gt;% distinct() Rename fid (subject id) field gp_clinical &lt;- gp_clinical %&gt;% rename(f.eid = eid) Load demographic data demog &lt;- readRDS(&quot;generated_data/demog_selected.RDS&quot;) Add a field indicating whether the date of event is special gp_clinical$special_dt &lt;- is_special_date(gp_clinical$event_dt) Convert the special dates demog_dob &lt;- demog %&gt;% select(f.eid, DOB) gp_clinical &lt;- gp_clinical %&gt;% left_join(demog_dob, by = &quot;f.eid&quot;) gp_clinical$event_dt &lt;- cleandates(gp_clinical$event_dt,gp_clinical$DOB) gp_clinical &lt;- gp_clinical %&gt;% select(-DOB) Save subject IDs represented in the primary care data gp_subject_ids &lt;- gp_clinical$f.eid %&gt;% unique() saveRDS(gp_subject_ids,&quot;generated_data/gp_subject_ids.RDS&quot;) Remove any events with missing dates gp_clinical &lt;- gp_clinical %&gt;% filter(!is.na(event_dt)) Filter out subjects with sex mismatch sex_mismatch_subject_ids &lt;- readRDS(&quot;generated_data/sex_mismatch_subject_ids.RDS&quot;) gp_clinical &lt;- gp_clinical %&gt;% filter(!(f.eid %in% sex_mismatch_subject_ids)) Save the primary care data fwrite(gp_clinical, &quot;generated_data/entire_gp_clinical_30March2021_formatted.txt&quot;, sep=&quot;\\t&quot;, row.names=F, quote=T) "],["make-code-dictionary.html", "6 Create a master code dictionary for primary care data", " 6 Create a master code dictionary for primary care data To phenotype a clinical event using primary care data, we need to identify a set of codes that represents the outcome of interest. To identify these codes, we first curate a master code dictionary which contains all of the codes and descriptions associated with primary care data. The master dictionary is a combination of the following types of code dictionaries, which we pull together to generate a master dictionary.: read v2 read v3 TPP The purpose of curating the master dictionary is so that we can subset the master dictionary and create a outcome-specific dictionary. For example, for phenotyping diabetes subjects, we would identify a certain set of codes that are known to indicate diabetes, and also search for a certain set of keywords in the descriptions of the codes since each code has multiple descriptions tied to it. Then, using diabetes-specific dictionary, we could identify subjects with diabetes from the PCP data. Curating outcome-specific dictionary is carried out in 7. library(data.table) library(tidyverse) "],["read-v2.html", "6.1 Read v2", " 6.1 Read v2 Import Read v2 code dictionary data. read2_dict_nondrug &lt;- openxlsx::read.xlsx(&quot;raw_data/all_lkps_maps_v3.xlsx&quot;, sheet = &quot;read_v2_lkp&quot;) read2_dict_drug &lt;- openxlsx::read.xlsx(&quot;raw_data/all_lkps_maps_v3.xlsx&quot;, sheet = &quot;read_v2_drugs_lkp&quot;) Combine drug and nondrug Read v2 dictionaries. Keep only read_code and term_description fields. read2_dict &lt;- full_join(read2_dict_drug,read2_dict_nondrug) %&gt;% select(read_code,term_description) "],["read-v3.html", "6.2 Read v3", " 6.2 Read v3 Import Read v3 code dictionary data read3_dict &lt;- openxlsx::read.xlsx(&quot;raw_data/all_lkps_maps_v3.xlsx&quot;, sheet = &quot;read_ctv3_lkp&quot;) Note that Read v3 dictionary has identical codes that start with period and without, for example, .9m05 vs 9m05. In the UKB database, the one starting with ‘.’ is never used. So, filter out codes that start with a lower case letter because these are the drug codes for Read v3 (CTV3) that match Read v2. read3_dict &lt;- read3_dict %&gt;% select(read_code, term_description) %&gt;% filter(!(grepl(&#39;^\\\\.&#39;, read_code))) Some Read v3 descriptions merely points to another Read v3 code rather than actual description, for example, the term description says “See XE0md.” So, we will replace this kind of term description with the actual description of the code. First, make look up table. lookup &lt;- read3_dict$term_description names(lookup) &lt;- read3_dict$read_code Check whether all the codes in “See [code]” description appear in the list of Read v3 codes. There are a couple of codes with description “See [Code]” that are not found keys of the lookup table. The descriptions of these codes will be replaced with NA. temp &lt;- read3_dict %&gt;% mutate(code_fillin = ifelse(grepl(&quot;^See &quot;, term_description), gsub(&quot;See &quot;, &quot;&quot;, term_description), NA)) temp2 &lt;- temp %&gt;% filter(!is.na(code_fillin)) %&gt;% .$code_fillin temp2[!(temp2 %in% names(lookup))] ## [1] &quot;proprietary for legal category&quot; &quot;proprietary&quot; Replace term description of the form “See [code]” with the actual description of the code. read3_dict &lt;- read3_dict %&gt;% mutate(code_fillin = ifelse(grepl(&quot;^See &quot;, term_description), gsub(&quot;See &quot;, &quot;&quot;, term_description), NA)) %&gt;% mutate(term_description = ifelse(is.na(code_fillin), term_description, lookup[code_fillin])) %&gt;% select(-code_fillin) We check whether Read v2 and Read v3 codes overlap. It seems all codes in Read v2 dictionary appear in Read v3 dictionary except for the following: read2_dict$read_code[!(read2_dict$read_code %in% read3_dict$read_code)] ## [1] &quot;Contains information from NHS Digital, licenced under the current version of the Open Government Licence available at www.nationalarchives.gov.uk/doc/open-government-licence/open-government-licence.htm\\&quot;&quot; "],["tpp-local-codes.html", "6.3 TPP local codes", " 6.3 TPP local codes Import TPP local codes which are also used in primary care data. These begin with ‘Y’ (Note: fread automatically resolved the parsing error that read_delim could not do, so we used fread to import the TPP local code data). tpp_local &lt;- fread(&quot;raw_data/tpp_local.txt&quot;) ## Warning in fread(&quot;raw_data/tpp_local.txt&quot;): Found and resolved improper quoting ## out-of-sample. First healed line 3572: &lt;&lt;Y5002 &quot;Bumping&quot; of heart&gt;&gt;. If the ## fields are not quoted (e.g. field separator does not appear within any field), ## try quote=&quot;&quot; to avoid this warning. TPP codes do not appear in read v2 tpp_local %&gt;% filter(code %in% read2_dict$read_code) ## Empty data.table (0 rows and 2 cols): code,term_description TPP codes do not appear in read v3 tpp_local %&gt;% filter(code %in% read3_dict$read_code) ## Empty data.table (0 rows and 2 cols): code,term_description "],["merge-read-v2-read-v3-and-tpp-dictionaries.html", "6.4 Merge Read v2, Read v3 and TPP dictionaries", " 6.4 Merge Read v2, Read v3 and TPP dictionaries Note that this merged dictionary is intended to cover all the descriptions used in Read v2, Read v3 and TPP so that we do not miss a description when are phenotyping an outcome later. So, the merged dictionary have one-to-many mapping from code to descriptions which is intentional and what we want. full_dict &lt;- full_join(read2_dict %&gt;% rename(code = read_code) %&gt;% mutate(terminology=&quot;read2&quot;), read3_dict %&gt;% rename(code = read_code) %&gt;% mutate(terminology=&quot;read3&quot;)) %&gt;% full_join(tpp_local %&gt;% mutate(terminology=&quot;read3&quot;, terminology_note = &quot;TPP Local Code&quot;)) %&gt;% distinct() Save the full code dictionary for primary care events saveRDS(full_dict,&quot;generated_data/full_dict.RDS&quot;) "],["make-outcome-specific-code-dictionary.html", "7 Make outcome-specific code dictionary", " 7 Make outcome-specific code dictionary In order to obtain outcome-specific dictionary, we want to first specify the following: inclusion codes or code patterns exclusion codes or code patterns inclusion keywords or keyword patterns exclusion keywords or keyword patterns Using these, we subset the master dictionary (full_dict.RDS) to generate outcome-specific dictionary. The following are the event tables that require the use of PCP data and thus require outcome-specific dictionary: Diabetes event table Diabetic eye disease table for capturing diabetic eye disease cases when curating time-to-event data Non-diabetic eye disease table for excluding controls for time-to-event data curation Kidney disease case event table for capturing diabetic kidney disease cases when curating time-to-event data Kidney disease event table for excluding controls for time-to-event data curation We achieve the following in this step: Generate diabetes specific dictionary Generate diabetic eye disease dictionary Generate non-diabetic eye disease dictionary Generate kidney disease case dictionary Generate kidney disease control exclusion event dictionary Input and output files: Input (from raw_data folder): dm_code_lists folder: opensafely-diabetes-2020-04-15.csv opensafely-diabetes-exeter-group-2020-07-06.csv opensafely-type-1-diabetes-2020-06-29.csv opensafely-type-2-diabetes-2020-06-29.csv read_diabetes_caliber.txt read_diabetes_expanded_caliber.txt read_diabetescomplications_caliber.txt kd_code_lists folder: opensafely-chronic-kidney-disease-2020-04-14.csv opensafely-dialysis-2020-07-16.csv opensafely-kidney-transplant-2020-07-15.csv Output: dm_dict.RDS dm_eye_disease_dict.RDS nondm_eye_disease_dict.RDS kidney_disease_case_dict.RDS kidney_disease_control_exclusion_dict.RDS "],["prepare-diabetes-code-dictionary.html", "7.1 Prepare diabetes code dictionary", " 7.1 Prepare diabetes code dictionary 7.1.1 Define keywords library(tidyverse) library(data.table) Global exclusion keywords. Codes that relate to the absence of a condition, screening for a condition, normal result for a condition, family history of a condition, various administrative statuses, and more, are not wanted. I exclude them from all of the following searches. global_exclusion_keyword_patterns &lt;- &quot; normal| absent|inspection|examination|evaluation|referral|^no |^O/E- no |^O/E - no |excluded|not seen|seen by|not examined|did not attend|assessable|offered|^trauma| trauma|malnutrition|screening for|^FH|family history|interpret|under care|refused|unsuitable|at risk|resolved|disease screening|not indicated|letter|excepted|exception|fear of|education|sharing consent|tumour|pregnancy|gestational|diabetic child|complication of care|steriod-induced|lymphoma|cytomegalovirus|rubella|blastoma|histoplasm|toxoplasm|neoplasm|herpes|tubercul|pediculus| observation$|injury|streptococcal&quot; DM specific exclusion keywords dm_specific_exclusion_keyword_patterns &lt;- &quot;|serum|antibody|remission|relative|association member|high risk of diabetes|suspected diabetes|non-diabetes|breath test|questionnaire|risk score|category score|risk calculator|inhibitor function|C-peptide level|factor binding protein 3|stress test|Insulin tolerance test|Urine screening test|X-ray|NHS Diabetes Prevention|Provision of diabetes clinical summary|diabetes mellitus screen|leaflet given|declined|C1-esterase|pituitary|helicobacter|ineligible|invite|invitation|insulinoma|steroid|secondary diabetes|pre-diabet|prediabet|insipid|provision of written information|not required|national audit|diabetes screen|renal diabetes|non-diabet|^diabetic nurse$|^Diabetic liaison nurse$|jamaica|secondary pancreatic diabetes|driving|neonatal|Addison|PABA test|growth factor|Plasma insulin level|key contact|eligibiliby|CHA2DS2|Professional judgement|Diabetes mellitus: no|non diabetic|information prescription|mother has|preg.|bronzed|Diabetes dietitian|Urine Ketone Test|deleted|refuse|gastropathy|pneumon|Frequency of hypoglycaem|^insulin level$|drug-induced|drug induced&quot; DM exclusion keywords dm_exclusion_keyword_patterns &lt;- paste0(global_exclusion_keyword_patterns,dm_specific_exclusion_keyword_patterns) Inclusion keywords dm_inclusion_keyword_patterns &lt;- &quot;diabetic|diabetes|diabeto|insulin|hyperglyc|hypoglyc|glycemic control&quot; 7.1.2 Define codes DM exclusion codes dm_exclusion_codes &lt;- c(&quot;ZV653&quot;, &quot;C3760&quot;, &quot;J4z0&quot;, &quot;Y3045&quot;, &quot;7L1L2&quot;, &quot;Y0015&quot;, &quot;X789v&quot;, &quot;Y7ITk&quot;, &quot;Y2200&quot;, &quot;42c..&quot;, &quot;42W..&quot;, &quot;42WZ.&quot;,&quot;66Ae.&quot;, &quot;66Ae0&quot;,&quot;66AF.&quot;,&quot;C1…&quot;,&quot;XaCET&quot;,&quot;XaCEU&quot;, &quot;XaCEV&quot;) dm_exclusion_code_patterns &lt;- paste(c(&quot;^42W&quot;,&quot;^42c&quot;),collapse = &#39;|&#39;) Import all the DM code lists dm_codelist &lt;- fread(&quot;raw_data/dm_code_lists/opensafely-diabetes-2020-04-15.csv&quot;) %&gt;% full_join(fread(&quot;raw_data/dm_code_lists/opensafely-type-1-diabetes-2020-06-29.csv&quot;) %&gt;% mutate(Category=1)) %&gt;% full_join(fread(&quot;raw_data/dm_code_lists/opensafely-type-2-diabetes-2020-06-29.csv&quot;) %&gt;% mutate(Category=2)) %&gt;% full_join(fread(&quot;raw_data/dm_code_lists/opensafely-diabetes-exeter-group-2020-07-06.csv&quot;) %&gt;% dplyr::rename(CTV3PreferredTermDesc = ctvterm)) %&gt;% dplyr::rename(term_description = CTV3PreferredTermDesc) %&gt;% dplyr::rename(code = CTV3ID) %&gt;% mutate(Category = as.character(Category)) %&gt;% full_join( fread(&quot;raw_data/dm_code_lists/read_diabetescomplications_caliber.txt&quot;) %&gt;% full_join(fread(&quot;raw_data/dm_code_lists/read_diabetes_expanded_caliber.txt&quot;)) %&gt;% full_join(fread(&quot;raw_data/dm_code_lists/read_diabetes_caliber.txt&quot;)) %&gt;% dplyr::rename(code = Clinical_code) %&gt;% dplyr::rename(term_description = Clinical_term) %&gt;% dplyr::rename(Category = `Category_(code)`) ) Define inclusion codes dm_inclusion_codes &lt;- dm_codelist$code Define additional DM code patterns we want dm_inclusion_code_patterns &lt;- paste(c(&quot;^66A&quot;,&quot;^C10&quot;,&quot;^F420&quot;),collapse = &#39;|&#39;) 7.1.3 Create diabetes code dictionary Import full dictionary full_dict &lt;- readRDS(&quot;generated_data/full_dict.RDS&quot;) Create diabetes code dictionary dm_dict &lt;- full_dict %&gt;% filter(grepl(dm_inclusion_keyword_patterns, term_description, ignore.case = T)| code %in% dm_inclusion_codes| grepl(dm_inclusion_code_patterns, code)) %&gt;% filter(!grepl(dm_exclusion_keyword_patterns, term_description, ignore.case = T), !(code %in% dm_exclusion_codes), !grepl(dm_exclusion_code_patterns, code)) Save diabetes code dictionary saveRDS(dm_dict,&quot;generated_data/dm_dict.RDS&quot;) "],["prepare-diabetic-eye-disease-code-dictionary.html", "7.2 Prepare diabetic eye disease code dictionary", " 7.2 Prepare diabetic eye disease code dictionary 7.2.1 Define keywords Inclusion keywords inclusion_keyword_patterns &lt;- &quot;macul|retin|ophthalmic manifestation|ophthalmic complication|cataract|glaucoma|eye disease|diabetic iritis&quot; Inclusion keywords for case inclusion_keyword_patterns_case &lt;- &quot;diabetic|diabetes|diabet retinopathy&quot; Global exclusion keywords global_exclusion_keyword_patterns &lt;- &quot;normal| absent|inspection|examination|evaluation|referral|^no |^O/E- no |^O/E - no |excluded|not seen|seen by|not examined|did not attend|assessable|offered|^trauma| trauma|malnutrition|screening for|^FH|family history|interpret|under care|refused|unsuitable|at risk|resolved|disease screening|not indicated|letter|excepted|exception|fear of|education|sharing consent|tumour|pregnancy|gestational|diabetic child|complication of care|steriod-induced|lymphoma|cytomegalovirus|rubella|blastoma|histoplasm|toxoplasm|neoplasm|herpes|tubercul|pediculus| observation$|injury|streptococcal&quot; Exclusion keywords exclusion_keyword_patterns &lt;- &quot; no maculopathy|^normal |translocation|cataract screen|retinol|incretin|diabetic retinopathy screening|retinal screening|steroid|drug induced|ratiation induced|branch of|vocational asses|electroretinography|buckling|tamponade|biopsy|retinopexy|cretin|glaucoma screen|pigment|fundoscopy|migraine|Commotio retinae|angiography|melanocytic macule|melanotic macule|acute retinal necrosis|radiation retinopathy|solar retinopathy|retinal dialysis|toxic maculopathy|eruption|retinacul|Acitretin|tretinoin|alopecia|branch of retinal artery$|rash&quot; exclusion_keywords &lt;- c(&quot;O/E - retina&quot;, &quot;Retinal photography&quot;, &quot;Retinoscopy&quot;, &quot;Senile macular disorder screen&quot;, &quot;Digital imaging of retina&quot;, &quot;[SO]Retina&quot;, &quot;Retinal scan - laser&quot;, &quot;Macula&quot;, &quot;Retina&quot;, &quot;Retinitis&quot;, &quot;Fundus flavimaculatus&quot;, &quot;Macula observation&quot;, &quot;Superior temporal branch of retinal vein&quot;, &quot;Senile macular disorder screening&quot;, &quot;Retinal vein&quot;, &quot;Branch of Retinal vein&quot;,&quot;Retinal artery&quot;,&quot;Limiting membrane of retina&quot;, &quot;Nerve fibre layer of retina&quot;,&quot;Inferior temporal quadrant of retina&quot;,&quot;Central retinal vein&quot;, &quot;Secondary syphilitic chorioretinitis&quot;, &quot;Maculopapular&quot;, &quot;Parafoveal retina&quot;, &quot;Retinal structure&quot;, &quot;Tomaculous neuropathy&quot;, &quot;CMV retinitis&quot;, &quot;Choroidal and retinal structures&quot;, &quot;Retinal arteriole&quot;) Exclusion keywords for case exclusion_keyword_patterns_case &lt;- &quot;non-diab|non diab&quot; 7.2.2 Define codes Inclusion codes inclusion_code_patterns &lt;- &quot;^F42&quot; inclusion_codes &lt;- c(&quot;F4407&quot;) Exclusion codes exclusion_code_patterns &lt;- c(&quot;^hg1|^hh51|^j24|^kaA|^m[5-7]&quot;) 7.2.3 Create diabetic eye disease code dictionary Import full dictionary full_dict &lt;- readRDS(&quot;generated_data/full_dict.RDS&quot;) Create eye disease code dictionary eye_disease_dict &lt;- full_dict %&gt;% filter(grepl(inclusion_keyword_patterns, term_description, ignore.case = T) | grepl(inclusion_code_patterns, code, ignore.case = T) | code %in% inclusion_codes) %&gt;% filter(!grepl(global_exclusion_keyword_patterns, term_description, ignore.case = T) &amp; !grepl(exclusion_keyword_patterns, term_description, ignore.case = T) &amp; !grepl(exclusion_code_patterns, code, ignore.case = F) &amp; !(term_description %in% exclusion_keywords)) Create diabetic eye disease code dictionary dm_eye_disease_dict &lt;- eye_disease_dict %&gt;% filter(grepl(inclusion_keyword_patterns_case, term_description, ignore.case=T) &amp; !grepl(exclusion_keyword_patterns_case, term_description, ignore.case=T)) Generate non-diabetic eye disease code dictionary nondm_eye_disease_dict &lt;- eye_disease_dict %&gt;% filter(!(code %in% dm_eye_disease_dict$code)) Save diabetic eye disease code dictionary and nondiabetic eye disease code dictionary saveRDS(dm_eye_disease_dict,&quot;generated_data/dm_eye_disease_dict.RDS&quot;) saveRDS(nondm_eye_disease_dict,&quot;generated_data/nondm_eye_disease_dict.RDS&quot;) "],["prepare-diabetic-kidney-disease-code-dictionary.html", "7.3 Prepare diabetic kidney disease code dictionary", " 7.3 Prepare diabetic kidney disease code dictionary 7.3.1 Define Keywords Inclusion keywords inclusion_keyword_patterns &lt;- &quot;chronic kidney|chronic renal|ckd|glomerul|kidney failure|renal failure|uraemi|uremi|nephropath|proteinuri|albuminuri|nephrotic|nephrosis|nephritic|renal manifestation|renal complication|end stage renal|end stage kidney|esrd&quot; Inclusion keywords for case inclusion_keyword_patterns_case &lt;- &quot;stage 3|stage 4|stage 5|end stage|chronic renal failure|chronic kidney failure|chronic uraemia|G3|G4|G5|A3|diabetes|diabetic|persistent proteinur|persistent albuminur|persistent microalbuminur|persistent macroalbuminur|ns - nephrotic syndrome$|^nephrotic syndrome NOS$&quot; inclusion_keywords_case &lt;- c(&quot;Nephrotic syndrome&quot;) Global Exclusion Keywords global_exclusion_keyword_patterns &lt;- &quot;normal| absent|inspection|examination|evaluation|referral|^no |^O/E- no |^O/E - no |excluded|not seen|seen by|not examined|did not attend|assessable|offered|^trauma| trauma|malnutrition|screening for|^FH|family history|interpret|under care|refused|unsuitable|at risk|resolved|disease screening|not indicated|letter|excepted|exception|fear of|education|sharing consent|tumour|pregnancy|gestational|diabetic child|complication of care|steriod-induced|lymphoma|cytomegalovirus|rubella|blastoma|histoplasm|toxoplasm|neoplasm|herpes|tubercul|pediculus| observation$|injury|streptococcal&quot; Exclusion keywords exclusion_keyword_patterns &lt;- &quot;nephritic factor|antibody|disease screening|rate testing|predicted stage|acute|induced by|metals|cadmium|lead|mercury|toxic|abortion|pregnancy|gestational|delivery|calculated by|^glomerular filtration rate$|nephropathy screen|invite|incipient|rate using|laboratory study|monitoring administration|Glomerular function test|benign|haemolytic|B12 deficiency|pyonephrosis|analgesic|Exercise|Adrenal|test strip|proteinuria negative|test urine sample&quot; 7.3.2 Define codes ckd_codelist &lt;- fread(&quot;raw_data/kd_code_lists/opensafely-kidney-transplant-2020-07-15.csv&quot;) %&gt;% full_join(fread(&quot;raw_data/kd_code_lists/opensafely-dialysis-2020-07-16.csv&quot;)) %&gt;% full_join(fread(&quot;raw_data/kd_code_lists/opensafely-chronic-kidney-disease-2020-04-14.csv&quot;)) %&gt;% dplyr::rename(term_description = CTV3PreferredTermDesc) %&gt;% dplyr::rename(code = CTV3ID) inclusion_codes &lt;- ckd_codelist$code 7.3.3 Create diabetic kidney disease code dictionary Import full dictionary full_dict &lt;- readRDS(&quot;generated_data/full_dict.RDS&quot;) Create kidney disease dictionary kidney_disease_dict &lt;- full_dict %&gt;% filter(grepl(inclusion_keyword_patterns,term_description, ignore.case = T) | code %in% inclusion_codes) %&gt;% filter(!grepl(global_exclusion_keyword_patterns, term_description, ignore.case = T) &amp; !grepl(exclusion_keyword_patterns, term_description, ignore.case = T)) Generate kidney disease dictionary that will be used for identifying diabetic kidney disease cases kidney_disease_case_dict &lt;- kidney_disease_dict %&gt;% filter(grepl(inclusion_keyword_patterns_case,term_description,ignore.case = T)| term_description %in% inclusion_keywords_case) Generate kidney disease dictionary that will be used for identifying controls to be excluded kidney_disease_control_exclusion_dict &lt;- kidney_disease_dict %&gt;% filter(!(code %in% kidney_disease_case_dict$code)) Save kidney disease case dictionary and kidney disease control exclusion code dictionary saveRDS(kidney_disease_case_dict,&quot;generated_data/kidney_disease_case_dict.RDS&quot;) saveRDS(kidney_disease_control_exclusion_dict,&quot;generated_data/kidney_disease_control_exclusion_dict.RDS&quot;) "],["phenotype-outcomes-ukb.html", "8 Phenotype outcome events using UKB assessment center data", " 8 Phenotype outcome events using UKB assessment center data Here, we use UKB all events table created in @ref(curate-all-ukb_events-table) to generate first occurrence and multiple event tables. We phenotype the following outcomes, which will be used to create time-to-event tables: Myocardial Infarction (MI) Unstable Angina Ischemic Stroke Hemorrhagic Stroke Stroke PCI Composite CVD The following outcomes and their event tables will be used to apply different control exclusion criteria to different time-to-event tables: Diabetic eye disease control exclusion events Diabetic kidney disease control exclusion events Cardiovascular control exclusion events Cerebrovascular control exclusion events Non-coronary revascularization control exclusion events The general phenotyping procedure for complication outcomes and control exclusion outcomes are the same. All we have to do is define patterns we want to search and match these patterms from all events table. The searching step is abstracted away in a function named get_phenotype_tab which resides in functions.R. The function takes in defined patterns in regex and search the patterns from the UKB all events table. The function outputs event table containing subjects with events matching input patterns and pattern types. These are the types of patterns the function accepts: UKB-defined field patterns and custom-defined field patterns ICD10 code patterns OPCS4 code patterns Self-reported condition code patterns Self-reported operation code patterns The UKB-defined field patterns match fields that are associated with first occurrence fields and algorithimically defined fields as defined by UKB study. The custom field pattern matches a custom field that one has defined when creating all UKB events table. Note that the only custom field that exists now is dr_self field used in phenotyping diabetes related eye disease. The code patterns including ICD10, OPCS4, self-reported condition and self-reported operation match the codes that represent some clinical event. Thus, to phenotype an outcome, one should first identify the fields and codes associated with an outcome, define the patterns, and pass them to function along with the master event table. Internally, get_phenotype_tab function uses grepl function in dplyr package to filter the master event table. Input and output files: Input: event_tab.RDS Output: mi_ukb.RDS mi_firstoccur_ukb.RDS unstable_angina_ukb.RDS unstable_angina_firstoccur_ukb.RDS stroke_infarct_ukb.RDS stroke_infarct_firstoccur_ukb.RDS stroke_hem_ukb.RDS stroke_hem_firstoccur_ukb.RDS stroke_ukb.RDS stroke_firstoccur_ukb.RDS pci_ukb.RDS pci_firstoccur_ukb.RDS cvd_ukb.RDS cvd_firstoccur_ukb.RDS dr_firstoccur_ukb.RDS dkd_ukb.RDS dkd_firstoccur_ukb.RDS dr_control_exclusion_events_ukb.RDS dkd_control_exclusion_events_ukb.RDS cardio_control_exclusion_events_ukb.RDS cerebro_control_exclusion_events_ukb.RDS other_revas_control_exclusion_events_ukb.RDS library(tidyverse) library(data.table) source(&quot;functions.R&quot;) "],["phenotype-outcome-events-using-ukb-assessment-center-data.html", "8.1 Phenotype outcome events using UKB assessment center data", " 8.1 Phenotype outcome events using UKB assessment center data Import the master event table obtained from UKB assessment datasets event_tab &lt;- readRDS(&quot;generated_data/all_ukb_events_tab.RDS&quot;) We phenotype the following outcome events using the UKB assessment center data in this R markdown: Diabetes (DM) Myocardial infarction (MI) Unstable angina Ischemic stroke Hemorrhagic stroke Stroke Percutaneous Coronary Intervention (PCI) Composite CVD Diabetic eye disease (DR) Diabetic Kidney Disease (CKD) 8.1.1 DM Define patterns to search dm_field_patterns &lt;- &quot;130706|130708|130714&quot; Get recurrent DM event table and first occurrence DM event table dm_ukb &lt;- get_phenotype_tab(field_patterns = dm_field_patterns,event_tab = event_tab,firstoccur = F) dm_firstoccur_ukb &lt;- get_phenotype_tab(field_patterns = dm_field_patterns,event_tab = event_tab,firstoccur = T) saveRDS(dm_ukb,&quot;generated_data/dm_ukb.RDS&quot;) saveRDS(dm_firstoccur_ukb,&quot;generated_data/dm_firstoccur_ukb.RDS&quot;) 8.1.2 MI Outcome fields: f.131298.0.0: the date of first occurrence of MI f.131300.0.0: the date of subsequent occurrence of MI (?) f.42000.0.0: the date of algorithmically defined MI outcome ICD10 code prefixes: I21 I22 I23 Define patterns to search mi_field_patterns &lt;- &quot;131298|131300|42000&quot; mi_icd10_patterns &lt;- &quot;^I21|^I22|^I23&quot; Get recurrent MI event table and first occurrence MI event table mi_ukb &lt;- get_phenotype_tab(field_patterns = mi_field_patterns, icd10_patterns_any = mi_icd10_patterns,event_tab = event_tab,firstoccur = F) mi_firstoccur_ukb &lt;- get_phenotype_tab(field_patterns = mi_field_patterns, icd10_patterns_any = mi_icd10_patterns,event_tab = event_tab,firstoccur = T) saveRDS(mi_ukb,&quot;generated_data/mi_ukb.RDS&quot;) saveRDS(mi_firstoccur_ukb,&quot;generated_data/mi_firstoccur_ukb.RDS&quot;) 8.1.3 Unstable Angina ICD10 code prefixes: I200 unstable_angina_icd10_patterns &lt;- &quot;I200&quot; Get recurrent and first occurrence unstable angina event tables unstable_angina_ukb &lt;- get_phenotype_tab(icd10_patterns_any = unstable_angina_icd10_patterns, event_tab = event_tab,firstoccur = F) unstable_angina_firstoccur_ukb &lt;- get_phenotype_tab(icd10_patterns_any = unstable_angina_icd10_patterns, event_tab = event_tab,firstoccur = T) saveRDS(unstable_angina_ukb,&quot;generated_data/unstable_angina_ukb.RDS&quot;) saveRDS(unstable_angina_firstoccur_ukb,&quot;generated_data/unstable_angina_firstoccur_ukb.RDS&quot;) 8.1.4 Ischemic Stroke Outcome fields: - 131366: Date I63 first reported (cerebral infarction) - 42008: algorithmically defined outcome for ischemic stroke ICD10 code prefixes: - I63 Self-reported condition codes: - 1583 stroke_infarct_field_patterns &lt;- &quot;131366|42008&quot; stroke_infarct_icd10_patterns &lt;- &quot;^I63&quot; stroke_infarct_selfrep_patterns &lt;- &quot;^1583$&quot; Get recurrent and first occurrence ischemic stroke event tables stroke_infacrt_ukb &lt;- get_phenotype_tab(field_patterns = stroke_infarct_field_patterns, icd10_patterns_any = stroke_infarct_icd10_patterns, selfrep_patterns = stroke_infarct_selfrep_patterns, event_tab = event_tab,firstoccur = F) stroke_infacrt_firstoccur_ukb &lt;- get_phenotype_tab(field_patterns = stroke_infarct_field_patterns, icd10_patterns_any = stroke_infarct_icd10_patterns, selfrep_patterns = stroke_infarct_selfrep_patterns, event_tab = event_tab,firstoccur = T) saveRDS(stroke_infacrt_ukb,&quot;generated_data/stroke_infarct_ukb.RDS&quot;) saveRDS(stroke_infacrt_firstoccur_ukb,&quot;generated_data/stroke_infarct_firstoccur_ukb.RDS&quot;) 8.1.5 Hemorrhagic Stroke Outcome fields: 131360: Subarachnoid Hemorrhage 131362: Intracerebral Hemorrhage 131364: Other non-traumatic Hemorrhage, 42010: Intracerebral Hemorrhage 42012: Subarachnoid Hemorrhage ICD10 code prefixes: - I60 - I61 - I62 Self-reported condition codes: - 1086 stroke_hem_field_patterns &lt;- &quot;131360|131362|131364|42010|42012&quot; stroke_hem_icd10_patterns &lt;- &quot;^I60|^I61|^I62&quot; stroke_hem_selfrep_patterns &lt;- &quot;^1086$&quot; Get recurrent and first occurrence hemorrhagic stroke event tables stroke_hem_ukb &lt;- get_phenotype_tab(field_patterns = stroke_hem_field_patterns, icd10_patterns_any = stroke_hem_icd10_patterns, selfrep_patterns = stroke_hem_selfrep_patterns, event_tab = event_tab,firstoccur = F) stroke_hem_firstoccur_ukb &lt;- get_phenotype_tab(field_patterns = stroke_hem_field_patterns, icd10_patterns_any = stroke_hem_icd10_patterns, selfrep_patterns = stroke_hem_selfrep_patterns, event_tab = event_tab,firstoccur = T) saveRDS(stroke_hem_ukb,&quot;generated_data/stroke_hem_ukb.RDS&quot;) saveRDS(stroke_hem_firstoccur_ukb,&quot;generated_data/stroke_hem_firstoccur_ukb.RDS&quot;) 8.1.6 Stroke Outcome fields: - 42006: unspecified stroke - 131368: unspecified stroke ICD10 code prefix - I64 Self-reported condition codes: - 1081 Outcome tables: - recurrent ischemic stroke event table - recurrent hemorrhagic stroke event table stroke_unspec_field_patterns &lt;- &quot;42006|131368&quot; stroke_unspec_icd10_patterns &lt;- &quot;^I64&quot; stroke_other_selfrep_patterns &lt;- &quot;^1081$&quot; Get recurrent stroke event table stroke_infarct_hem_ukb &lt;- full_join(stroke_infacrt_ukb,stroke_hem_ukb) %&gt;% arrange(f.eid,event_dt) stroke_unspec_ukb &lt;- get_phenotype_tab(field_patterns = stroke_unspec_field_patterns, icd10_patterns_any = stroke_unspec_icd10_patterns, event_tab = event_tab,firstoccur = F) stroke_other_ukb &lt;- get_phenotype_tab(selfrep_patterns = stroke_other_selfrep_patterns, event_tab = event_tab,firstoccur = F) stroke_ukb &lt;- stroke_infarct_hem_ukb %&gt;% full_join(stroke_unspec_ukb, by = c(&quot;f.eid&quot;,&quot;event_dt&quot;)) %&gt;% full_join(stroke_other_ukb, by = c(&quot;f.eid&quot;,&quot;event_dt&quot;)) %&gt;% arrange(f.eid,event_dt) Get first occurrence stroke event table stroke_firstoccur_ukb &lt;- stroke_ukb %&gt;% group_by(f.eid) %&gt;% arrange(event_dt) %&gt;% slice(1) saveRDS(stroke_ukb,&quot;generated_data/stroke_ukb.RDS&quot;) saveRDS(stroke_firstoccur_ukb,&quot;generated_data/stroke_firstoccur_ukb.RDS&quot;) 8.1.7 PCI OPCS4 codes: - K40, K41, K42, K43, K44, K45, K46, K483, K49, K501, K75, K76 Self-reported operation codes: - 1070 (Coronary Angioplasty) - 1095 (Coronary bypass grafts) # OPCS patterns start with &#39;K&#39; so do not have to start the pattern with &#39;^&#39; pci_opcs_patterns &lt;- &quot;K40|K41|K42|K43|K44|K45|K46|K483|K49|K501|K75|K76&quot; pci_selfrep_op_patterns &lt;- &quot;^1070$|^1095$&quot; Get recurrent and first occurrence pci event tables pci_ukb &lt;- get_phenotype_tab(opcs_patterns = pci_opcs_patterns, selfrep_op_patterns = pci_selfrep_op_patterns, event_tab = event_tab,firstoccur = F) pci_firstoccur_ukb &lt;- get_phenotype_tab(opcs_patterns = pci_opcs_patterns, selfrep_op_patterns = pci_selfrep_op_patterns, event_tab = event_tab,firstoccur = T) saveRDS(pci_ukb,&quot;generated_data/pci_ukb.RDS&quot;) saveRDS(pci_firstoccur_ukb,&quot;generated_data/pci_firstoccur_ukb.RDS&quot;) 8.1.8 CVD death ICD10 code prefixes (primary death): -I* cvd_death_icd10_death_primary_patterns &lt;- &quot;^I&quot; cvd_death_ukb &lt;- get_phenotype_tab(icd10_patterns_pd = cvd_death_icd10_death_primary_patterns, event_tab = event_tab,firstoccur = F) cvd_death_firstoccur_ukb &lt;- get_phenotype_tab(icd10_patterns_pd = cvd_death_icd10_death_primary_patterns, event_tab = event_tab,firstoccur = T) 8.1.9 Composite CVD Composite CVD was defined to be any of the following events: MI Ischemic stroke unstable angina PCI CVD death Thus, phenotyping composite CVD requires recurrent event tables of MI, Ischemic stroke, unstable angina, PCI and CVD death Get recurrent and first occurrence composite CVD event tables cvd_ukb &lt;- mi_ukb %&gt;% full_join(stroke_infacrt_ukb) %&gt;% full_join(unstable_angina_ukb) %&gt;% full_join(pci_ukb) %&gt;% full_join(cvd_death_ukb) %&gt;% distinct() %&gt;% arrange(f.eid,event_dt) cvd_firstoccur_ukb &lt;- cvd_ukb %&gt;% group_by(f.eid) %&gt;% arrange(event_dt) %&gt;% slice(1) saveRDS(cvd_ukb,&quot;generated_data/cvd_ukb.RDS&quot;) saveRDS(cvd_firstoccur_ukb,&quot;generated_data/cvd_firstoccur_ukb.RDS&quot;) 8.1.10 DR ICD10 codes: E1*.3: Diabetes Mellitus with Ophthalmic Complications H36.0: Diabetic Retinopathy H28.0: Diabetic Cataract ICD9 codes: 2504: Diabetes with Ophthalmic manifestations 3620: Diabetic retinopathy Self-reported condition codes: 1276 Custom defined fields: dr_self: the date of DR diagnosis (wrangling of f.5901.0.0, f.5901.1.0, f.5901.2.0, f.5901.3.0 where they record age at which DR was diagnosed at four different time points) Define patterns dr_icd10 &lt;- &quot;E103|E113|E133|E143|H360|H280&quot; dr_icd9 &lt;- &quot;^2504|^3620&quot; dr_self &lt;- &quot;1276&quot; dr_custom &lt;- &quot;dr_self&quot; Get first occurrence composite CVD event tables. Note that we are not generating multiple events table for DR. dr_firstoccur_ukb &lt;- get_phenotype_tab(icd10_patterns_any = dr_icd10, icd9_patterns_any = dr_icd9, selfrep_patterns = dr_self, custom_field_patterns = dr_custom, event_tab = event_tab,firstoccur = T) saveRDS(dr_firstoccur_ukb,&quot;generated_data/dr_firstoccur_ukb.RDS&quot;) 8.1.11 CKD Outcome fields: 42026: algorithmically defined End-Stage Renal Disease (ESRD) ICD10 codes: E1.2: Diabetes Mellitus with renal complication N18[0345]: CKD Stage 3-5, end stage N083: Glomerular disorders in Diabetes Mellitus ICD9 codes: - 2503: Diabetes with renal manifestations - 5859: Renal failure Self-reported condition codes: 1607 dkd_field_patterns &lt;- &quot;42026&quot; dkd_icd10 &lt;- &quot;E102|E112|E132|E142|N180|N183|N184|N185|N083&quot; dkd_icd9 &lt;- &quot;^2503|^5859&quot; dkd_self &lt;- &quot;1607&quot; Get recurrent and first occurrence composite diabetic kidney disease event tables dkd_ukb &lt;- get_phenotype_tab(field_patterns = dkd_field_patterns, icd10_patterns_any = dkd_icd10, icd9_patterns_any = dkd_icd9, selfrep_patterns = dkd_self, event_tab = event_tab,firstoccur = F) dkd_firstoccur_ukb &lt;- get_phenotype_tab(field_patterns = dkd_field_patterns, icd10_patterns_any = dkd_icd10, icd9_patterns_any = dkd_icd9, selfrep_patterns = dkd_self, event_tab = event_tab,firstoccur = T) saveRDS(dkd_ukb,&quot;generated_data/dkd_ukb.RDS&quot;) saveRDS(dkd_firstoccur_ukb,&quot;generated_data/dkd_firstoccur_ukb.RDS&quot;) "],["phenotype-control-exclusion-events-using-ukb-assessment-center-data.html", "8.2 Phenotype control exclusion events using UKB assessment center data", " 8.2 Phenotype control exclusion events using UKB assessment center data 8.2.1 Cardiovascular control exclusion events Define patterns exclude_ctrl_cardio_icd10 &lt;- &quot;I2|I3|I5|I6|I7&quot; exclude_ctrl_cardio_self &lt;- &quot;1074|1076|1077|1078|1079|1080|1471|1489|1490|1492|1584|1585|1586|1587|1588|1589|1590|1591|1592&quot; exclude_ctrl_cardio_selfop &lt;- &quot;1069|1096|1097|1098|1099|1100|1101|1104|1523|1553|1554&quot; cardio_control_exclusion_events &lt;- get_phenotype_tab(icd10_patterns_any = exclude_ctrl_cardio_icd10, selfrep_patterns = exclude_ctrl_cardio_self, selfrep_op_patterns = exclude_ctrl_cardio_selfop,event_tab = event_tab,firstoccur = F) How many unique subjects with cardio control exclusion events? cardio_control_exclusion_events %&gt;% .$f.eid %&gt;% unique %&gt;% length() ## [1] 105642 saveRDS(cardio_control_exclusion_events,&quot;generated_data/cardio_control_exclusion_events_ukb.RDS&quot;) 8.2.2 Cerebrovascular control exclusion events Define patterns exclude_ctrl_cereb_icd10 &lt;- &quot;G45|G46|I65|I66|I67|I68|I69&quot; exclude_ctrl_cereb_self &lt;- &quot;1082&quot; cerebro_control_exclusion_events &lt;- get_phenotype_tab(icd10_patterns_any = exclude_ctrl_cereb_icd10, selfrep_patterns = exclude_ctrl_cereb_self,event_tab = event_tab,firstoccur = F) How many unique subjects with cerebro control exclusion events? cerebro_control_exclusion_events %&gt;% .$f.eid %&gt;% unique %&gt;% length() ## [1] 18092 saveRDS(cerebro_control_exclusion_events,&quot;generated_data/cerebro_control_exclusion_events_ukb.RDS&quot;) 8.2.3 Non-coronary revascularization procedure control exclusion events other_revasc_selfop &lt;- &quot;1071|1102|1105|1107|1108|1109|1110&quot; other_revas_control_exclusion_events &lt;- get_phenotype_tab(selfrep_op_patterns = other_revasc_selfop, event_tab = event_tab, firstoccur = F) How many unique subjects with non-cornoary revascularization procedure control exclusion events? other_revas_control_exclusion_events %&gt;% .$f.eid %&gt;% unique %&gt;% length() ## [1] 2294 saveRDS(other_revas_control_exclusion_events,&quot;generated_data/other_revas_control_exclusion_events_ukb.RDS&quot;) 8.2.4 Renal disease control exclusion events Define patterns exclude_ctrl_renal_icd10 &lt;- &quot;N0|N1|N2|Z49|Z992&quot; exclude_ctrl_renal_icd9 &lt;- &quot;^58[0-9]|^59[1-4]|^590[23]|^V420|^V454|^V560|^V568&quot; exclude_ctrl_renal_self &lt;- &quot;1192|1193|1194|1519|1520|1608|1609&quot; exclude_ctrl_renal_selfop &lt;- &quot;1195|1487&quot; exclude_ctrl_renal_opcs &lt;- &quot;M01|M02|M03|X40|X41|X42&quot; dkd_control_exclusion_events &lt;- get_phenotype_tab(icd10_patterns_any = exclude_ctrl_renal_icd10, icd9_patterns_any = exclude_ctrl_renal_icd9, selfrep_patterns = exclude_ctrl_renal_self, selfrep_op_patterns = exclude_ctrl_renal_selfop, opcs_patterns = exclude_ctrl_renal_opcs,event_tab = event_tab,firstoccur = F) How many unique subjects with renal control exclusion events? dkd_control_exclusion_events %&gt;% .$f.eid %&gt;% unique %&gt;% length() ## [1] 53782 saveRDS(dkd_control_exclusion_events,&quot;generated_data/dkd_control_exclusion_events_ukb.RDS&quot;) 8.2.5 Eye disease control exclusion events Define patterns exclude_eye_icd10 &lt;- &quot;H25|H26|H28|H34|H35|H36|H40|H42&quot; exclude_eye_icd9 &lt;- &quot;^36[256]&quot; exclude_eye_self &lt;- &quot;1275|1277|1278|1281|1282|1527|1538|1530&quot; exclude_eye_selfop &lt;- &quot;1434|1435|1436|1437&quot; dr_control_exclusion_events &lt;- get_phenotype_tab(icd10_patterns_any = exclude_eye_icd10, icd9_patterns_any = exclude_eye_icd9, selfrep_patterns = exclude_eye_self, selfrep_op_patterns = exclude_eye_selfop,event_tab = event_tab,firstoccur = F) How many unique subjects with cardio control exclusion events? dr_control_exclusion_events %&gt;% .$f.eid %&gt;% unique %&gt;% length() ## [1] 83259 saveRDS(dr_control_exclusion_events,&quot;generated_data/dr_control_exclusion_events_ukb.RDS&quot;) "],["phenotype-outcomes-pcp.html", "9 Phenotype outcomes using primary care data", " 9 Phenotype outcomes using primary care data We acheive the following in this folder: Generate diabetes first occurrence and multiple event table (phenotype_outcome_events_pcp.Rmd) Generate advanced chronic disease/diabetic kidney disease first occurrence and multiple event tables (phenotype_outcome_events_pcp.Rmd) Generate diabetic eye disease first occurrence and multiple event tables (phenotype_outcome_events_pcp.Rmd) Generate kidney disease control exclusion event table (phenotype_control_exclusion_events_pcp.Rmd) Generate non-diabetic eye disease event table that will be used to exclude controls from generated time-to-event data later (phenotype_control_exclusion_events_pcp.Rmd) We utilize outcome-specific dictionaries generated in make_outcome_specific_code_dictionary to subset a primary care data and to generate different event tables. Input and output files: Input: entire_gp_clinical_30March2021_formatted.txt dm_dict.RDS dm_eye_disease_dict.RDS kidney_disease_case_dict.RDS nondm_eye_disease_dict.RDS kidney_disease_control_exclusion_dict.RDS Output: dm_pc.RDS dm_firstoccur_pc.RDS dr_pc.RDS dr_firstoccur_pc.RDS kidney_disease_case_pc.RDS kidney_disease_case_firstoccur_pc.RDS kidney_disease_control_exclusion_pc.RDS nondm_eye_disease_pc.RDS "],["phenotype-outcome-events-using-primary-care-data.html", "9.1 Phenotype outcome events using primary care data", " 9.1 Phenotype outcome events using primary care data library(tidyverse) library(data.table) source(&quot;reference.R&quot;) Import primary care data pc &lt;- fread(&quot;generated_data/entire_gp_clinical_30March2021_formatted.txt&quot;) Import the following outcome-specific dictionaries: diabetes code dictionary diabetic eye disease code dictionary kidney disease code dictionary dm_dict &lt;- readRDS(&quot;generated_data/dm_dict.RDS&quot;) dr_dict &lt;- readRDS(&quot;generated_data/dm_eye_disease_dict.RDS&quot;) kidney_disease_case_dict &lt;- readRDS(&quot;generated_data/kidney_disease_case_dict.RDS&quot;) We phenotype the following outcome events in this R markdown: Diabetes (DM) Diabetic eye disease (DR) Kidney disease 9.1.1 DM We pick out the individuals with terms that we are confident that they had diabetes. These terms were selected with the help of a physician, and defined in reference.R as an object, dm_descriptions. If a subject had terms predating the certain diagnosis which are less certain, we assume that the earlier diagnosis was the better start date. For example, suppose we have a subject with following diabetes events: 2012: “Diabetic dietary review” 2013: “Type II diabetes” This individual is considered diabetic (type 2) and the first date is 2012. Whereas, the following subject is not included as diabetes patient because the codes are not strong enough to indicate diabetes: 2012: “Diabetic dietary review” 2013: “Diabetic dietary review” Filter PCP data for any DM indication diabetics_any &lt;- pc %&gt;% select(f.eid, code, event_dt) %&gt;% filter(code %in% unique(dm_dict$code)) %&gt;% distinct() Get DM codes with clear DM indication dm_codes_confident &lt;- dm_dict %&gt;% filter(term_description %in% dm_descriptions) %&gt;% .$code %&gt;% unique Filter PCP data with any DM indication for clear DM indication. Note that diabetics_simple is the recurrent DM event table. diabetics_simple &lt;- diabetics_any %&gt;% group_by(f.eid) %&gt;% filter(any(code %in% dm_codes_confident)) %&gt;% mutate(event_dt = as.Date(event_dt)) %&gt;% select(f.eid,event_dt) %&gt;% distinct() %&gt;% arrange(f.eid,event_dt) Select first occurrence diabetes event dm_firstoccur_pc &lt;- diabetics_simple %&gt;% group_by(f.eid) %&gt;% arrange(event_dt) %&gt;% slice(1) saveRDS(diabetics_simple,&quot;generated_data/dm_pc.RDS&quot;) saveRDS(dm_firstoccur_pc,&quot;generated_data/dm_firstoccur_pc.RDS&quot;) 9.1.2 DR Phenotype recurrent diabetic eye disease event table dr_pc &lt;- pc %&gt;% filter(code %in% dr_dict$code) %&gt;% select(f.eid,event_dt) %&gt;% mutate(event_dt=as.Date(event_dt)) %&gt;% distinct() %&gt;% arrange(f.eid,event_dt) Select first occurrence dr_firstoccur_pc &lt;- dr_pc %&gt;% group_by(f.eid) %&gt;% arrange(event_dt) %&gt;% slice(1) saveRDS(dr_pc,&quot;generated_data/dr_pc.RDS&quot;) saveRDS(dr_firstoccur_pc,&quot;generated_data/dr_firstoccur_pc.RDS&quot;) 9.1.3 CKD Phenotype recurrent (chronic?) kidney disease event tables kidney_disease_case_pc &lt;- pc %&gt;% filter(code %in% kidney_disease_case_dict$code) %&gt;% select(f.eid,event_dt) %&gt;% mutate(event_dt = as.Date(event_dt)) %&gt;% distinct() %&gt;% arrange(f.eid,event_dt) Select first occurrence kidney_disease_case_firstoccur_pc &lt;- kidney_disease_case_pc %&gt;% group_by(f.eid) %&gt;% arrange(event_dt) %&gt;% slice(1) saveRDS(kidney_disease_case_pc,&quot;generated_data/kidney_disease_case_pc.RDS&quot;) saveRDS(kidney_disease_case_firstoccur_pc,&quot;generated_data/kidney_disease_case_firstoccur_pc.RDS&quot;) "],["phenotype-control-exclusion-events-using-primary-care-data.html", "9.2 Phenotype control exclusion events using primary care data", " 9.2 Phenotype control exclusion events using primary care data Import the following outcome-specific dictionaries: Non-diabetic eye disease dictionary kidney disease control exclusion event code dictionary nondm_eye_disease_dict &lt;- readRDS(&quot;generated_data/nondm_eye_disease_dict.RDS&quot;) kidney_disease_control_exclusion_dict &lt;- readRDS(&quot;generated_data/kidney_disease_control_exclusion_dict.RDS&quot;) We phenotype the following outcome events that will be used as control exclusion events in this R markdown: Non-diabetic eye disease events Kidney disease control exclusion events 9.2.1 Non-diabetic eye disease events Phenotype non-DM eye disease to be used as control exclusion events nondm_eye_disease_pc &lt;- pc %&gt;% filter(code %in% nondm_eye_disease_dict$code) %&gt;% select(f.eid,event_dt) %&gt;% mutate(event_dt=as.Date(event_dt)) 9.2.2 Kidney disease control exclusion events Phenotype control exclusion kidney disease events kidney_disease_control_exclusion_pc &lt;- pc %&gt;% filter(code %in% kidney_disease_control_exclusion_dict$code) %&gt;% mutate(event_dt = as.Date(event_dt)) "],["traj-ukb.html", "10 Create biomarker trajectory data from UK biobank assessment center data", " 10 Create biomarker trajectory data from UK biobank assessment center data library(tidyverse) library(lubridate) source(&quot;functions.R&quot;) Load reformatted UKB demographics and labs tables demog_ukb &lt;- readRDS(&quot;generated_data/demog_UKB.RDS&quot;) labs_ukb &lt;- readRDS(&quot;generated_data/labs_UKB.RDS&quot;) demog_sel &lt;- readRDS(&quot;generated_data/demog_selected.RDS&quot;) Define fieldID key fieldID_key &lt;- c( &quot;30080&quot; = &quot;platelets&quot;, &quot;30500&quot; = &quot;albumin_urine&quot;, &quot;30510&quot; = &quot;creat_urine&quot;, &quot;30600&quot; = &quot;albumin_blood&quot;, &quot;30690&quot; = &quot;chol&quot;, &quot;30700&quot; = &quot;creat_blood&quot;, &quot;30720&quot; = &quot;cystatin_c&quot;, &quot;30740&quot; = &quot;glucose_rand&quot;, #&quot;Blood glucose&quot; &quot;30750&quot; = &quot;hba1c&quot;, &quot;30760&quot; = &quot;hdl&quot;, &quot;30780&quot; = &quot;ldl&quot;, &quot;30870&quot; = &quot;trig&quot;, &quot;4080&quot; = &quot;sbp&quot;, &quot;93&quot; = &quot;sbp&quot;, &quot;4079&quot; = &quot;dbp&quot;, &quot;94&quot; = &quot;dbp&quot; ) Create biomarker trajectory data for all biomarkers defined above biomarker_traj_tab_long &lt;- full_join(labs_ukb,demog_ukb) %&gt;% select(f.eid,matches(paste0(paste(paste0(&#39;f.&#39;,names(fieldID_key)),collapse = &#39;|&#39;)))) %&gt;% pivot_longer(cols = -f.eid, names_to = &quot;fields&quot;, values_to = &quot;measurement&quot;) %&gt;% filter(!is.na(measurement)) %&gt;% separate(fields, c(&#39;f&#39;,&quot;biomarker_field_id&quot;, &quot;visit&quot;, &quot;array&quot;), sep = &quot;\\\\.&quot;) %&gt;% mutate(biomarker = fieldID_key[biomarker_field_id]) %&gt;% left_join(demog_sel %&gt;% select(f.eid,date_init,date_repeat)) %&gt;% mutate(event_dt = as.Date(ifelse(visit == &#39;0&#39;, date_init, ifelse(visit==&#39;1&#39;, date_repeat, NA)), origin=origin)) %&gt;% select(f.eid,measurement,event_dt,visit,biomarker) ## Joining, by = &quot;f.eid&quot; ## Joining, by = &quot;f.eid&quot; Compute urine albumin to urine creatinine ratio (UACR) uacr_traj &lt;- biomarker_traj_tab_long %&gt;% filter(biomarker %in% c(&quot;albumin_urine&quot;,&quot;creat_urine&quot;)) %&gt;% pivot_wider(id_cols = c(f.eid,event_dt), names_from = c(biomarker,visit), values_from = measurement) %&gt;% mutate(uacr0 = albumin_urine_0/(creat_urine_0*10^-3), uacr1 = albumin_urine_1/(creat_urine_1*10^-3)) %&gt;% select(f.eid,event_dt,uacr0,uacr1) %&gt;% pivot_longer(cols = c(uacr0,uacr1), names_to = &quot;visit&quot;, values_to = &quot;measurement&quot;) %&gt;% mutate(visit = ifelse(visit == &quot;uacr0&quot;,&#39;0&#39;,&#39;1&#39;)) %&gt;% select(f.eid,measurement,event_dt,visit) %&gt;% filter(!is.na(measurement)) %&gt;% mutate(biomarker = &quot;uacr&quot;) Add UACR trajectory data to the biomarker_traj_tab_long biomarker_traj_tab_long &lt;- bind_rows(biomarker_traj_tab_long,uacr_traj) %&gt;% filter(!is.na(event_dt),!is.na(measurement)) Create macro/microalbuminuria event table albuminuria_event_tab &lt;- biomarker_traj_tab_long %&gt;% filter(biomarker == &quot;uacr&quot;) %&gt;% mutate(macroalbuminuria = ifelse(measurement &lt; 33.9,F,T), microalbuminuria = ifelse(measurement &lt; 3.4,F,T)) %&gt;% select(f.eid,event_dt,macroalbuminuria,microalbuminuria) %&gt;% pivot_longer(cols=c(macroalbuminuria,microalbuminuria),values_to = &quot;event&quot;, names_to = &quot;type&quot;) %&gt;% select(f.eid,event,event_dt,type) Infer macro/microalbuminuria status: If a subject was missing urine albumin or urine creatinine levels, we cannot compute urine albumin to creatinine ratio (UACR). Urine albumin levels were assumed to be undetectable (NA values) if urine albumin levels were below 6.7. Subjects with known detection issue had missing urine albumin measurements. However, we can still rule out micro/macroalbuminuria using the urine creatinine levels by computing the upper bound of UACR. To elaborate, suppose a subject’s urine albumin level \\(a\\) is below the detection level, i.e. \\(a &lt; 6.7\\). Then, \\(ACR = \\frac{a}{c \\times 10^{-3}} &lt; \\frac{6.7}{c\\times 10^{-3}}\\) where \\(c:=\\) urine creatinine levels. Thus, \\(\\frac{6.7}{c\\times 10^{-3}}\\) is an upper bound of ACR for the subject. Thus -if the upper bound of \\(ACR\\) is less than 33.9, rule out macroalbuminuria -if the upper bound of \\(ACR\\) is less than 3.4, rule out microalbuminuria. subjects_with_urine_albumin_below_detection_limit &lt;- labs_ukb %&gt;% rename(below_detection_visit0 = f.30505.0.0, below_detection_visit1 = f.30505.1.0) %&gt;% select(f.eid,contains(&quot;below&quot;)) %&gt;% pivot_longer(contains(&quot;below&quot;),names_to = &quot;visit&quot;,values_to = &quot;below_detection_limit&quot;) %&gt;% mutate(visit = ifelse(visit == &quot;below_detection_visit0&quot;,0,1), below_detection_limit = ifelse(is.na(below_detection_limit),NA,T)) %&gt;% filter(below_detection_limit == T) %&gt;% select(f.eid,visit) albuminuria_event_tab_inferred &lt;- biomarker_traj_tab_long %&gt;% filter(biomarker == &quot;creat_urine&quot;) %&gt;% filter(f.eid %in% subjects_with_urine_albumin_below_detection_limit$f.eid) %&gt;% mutate(ACR_upper_bound = 6.7/(measurement*10^-3)) %&gt;% mutate(macroalbuminuria = ifelse(ACR_upper_bound &lt; 33.9,F,NA), microalbuminuria = ifelse(ACR_upper_bound &lt; 3.4,F,NA)) %&gt;% select(f.eid,event_dt,macroalbuminuria,microalbuminuria) %&gt;% pivot_longer(cols=c(macroalbuminuria,microalbuminuria),values_to = &quot;event&quot;, names_to = &quot;type&quot;) %&gt;% filter(!is.na(event)) %&gt;% select(f.eid,event,event_dt,type) Combine inferred albuminuria event table with albuminuria_event_tab albuminuria_event_tab &lt;- bind_rows(albuminuria_event_tab,albuminuria_event_tab_inferred) %&gt;% distinct() Load demographics table and subjects with sex mismatch demog &lt;- readRDS(&quot;generated_data/demog_selected.RDS&quot;) sex_mismatch_subject_ids &lt;- readRDS(&quot;generated_data/sex_mismatch_subject_ids.RDS&quot;) Filter out from from biomarker trajectory table and albuminuria event table: any subjects with sex mismatch any events with special dates any events with unknown date any unknown measurements (only applies to biomarker trajectory table) biomarker_traj_tab_long &lt;- biomarker_traj_tab_long[!(biomarker_traj_tab_long$f.eid %in% sex_mismatch_subject_ids),] biomarker_traj_tab_long &lt;- biomarker_traj_tab_long %&gt;% left_join(demog %&gt;% select(f.eid,DOB),by=&quot;f.eid&quot;) biomarker_traj_tab_long$event_dt &lt;- cleandates(biomarker_traj_tab_long$event_dt,biomarker_traj_tab_long$DOB,T) %&gt;% as.Date() biomarker_traj_tab_long &lt;- biomarker_traj_tab_long %&gt;% select(-DOB) biomarker_traj_tab_long &lt;- biomarker_traj_tab_long[!is.na(biomarker_traj_tab_long$event_dt),] biomarker_traj_tab_long &lt;- biomarker_traj_tab_long[!is.na(biomarker_traj_tab_long$measurement),] albuminuria_event_tab &lt;- albuminuria_event_tab[!(albuminuria_event_tab$f.eid %in% sex_mismatch_subject_ids),] albuminuria_event_tab &lt;- albuminuria_event_tab %&gt;% left_join(demog %&gt;% select(f.eid,DOB),by=&quot;f.eid&quot;) albuminuria_event_tab$event_dt &lt;- cleandates(albuminuria_event_tab$event_dt,albuminuria_event_tab$DOB,T) %&gt;% as.Date() albuminuria_event_tab &lt;- albuminuria_event_tab %&gt;% select(-DOB) albuminuria_event_tab &lt;- albuminuria_event_tab[!is.na(albuminuria_event_tab$event_dt),] Save the biomarker trajectory table and albuminuria event table extracted from the UKB asssessment center data. saveRDS(biomarker_traj_tab_long,&quot;generated_data/biomarker_trajectory_ukb.RDS&quot;) saveRDS(albuminuria_event_tab,&quot;generated_data/albuminuria_event_tab_ukb.RDS&quot;) "],["traj-pcp.html", "11 Curate biomarker trajectory data from primary care data", " 11 Curate biomarker trajectory data from primary care data In this step, we curate biomarker trajectory data extracted from reformatted primary care table prepared in @ref(prep_pcp_data). Load necessary packages library(tidyverse) library(knitr) Load reformatted primary care table gp_clinical &lt;- data.table::fread(&quot;generated_data/entire_gp_clinical_30March2021_formatted.txt&quot;) head(gp_clinical) ## f.eid data_provider event_dt value1 value2 value3 code terminology ## 1: 1000050 3 1961-02-16 S337. read3 ## 2: 1000050 3 1965-05-15 S4B0. read3 ## 3: 1000050 3 1979-07-27 9N1K. read3 ## 4: 1000050 3 1985-01-01 7K6R. read3 ## 5: 1000050 3 1987-01-01 XE108 read3 ## 6: 1000050 3 1987-02-01 XE0as read3 ## special_dt ## 1: FALSE ## 2: FALSE ## 3: FALSE ## 4: FALSE ## 5: FALSE ## 6: FALSE Read in the previously generated full code dictionary for primary care terms. full_dict &lt;- readRDS(&quot;generated_data/full_dict.RDS&quot;) tail(full_dict) ## code term_description terminology ## 549496 YX128 Attending Diabetes satellite clinic read3 ## 549497 YX129 Consultant Urologist read3 ## 549498 YX131 Cytoscopy Expected Findings &amp; Plan of Action if Found read3 ## 549499 YX132 Normal Urethra, Prostate &amp; Bladder read3 ## 549500 YX137 Stroke/TIA annual review read3 ## 549501 ya299 FH: Alpha 1 anti-trypsin deficiency read3 ## terminology_note ## 549496 TPP Local Code ## 549497 TPP Local Code ## 549498 TPP Local Code ## 549499 TPP Local Code ## 549500 TPP Local Code ## 549501 TPP Local Code For the purpose of combining the dictionary with gp_clinical, remove terms with missing descriptions, additional descriptions for the same code, and identical codes+descriptions across terminology(read v2/CTV3) full_dict &lt;- full_dict %&gt;% select(-terminology) %&gt;% distinct() %&gt;% filter(term_description != &quot;&quot;) %&gt;% distinct(code, .keep_all = T) tail(full_dict) ## code term_description ## 307923 YX128 Attending Diabetes satellite clinic ## 307924 YX129 Consultant Urologist ## 307925 YX131 Cytoscopy Expected Findings &amp; Plan of Action if Found ## 307926 YX132 Normal Urethra, Prostate &amp; Bladder ## 307927 YX137 Stroke/TIA annual review ## 307928 ya299 FH: Alpha 1 anti-trypsin deficiency ## terminology_note ## 307923 TPP Local Code ## 307924 TPP Local Code ## 307925 TPP Local Code ## 307926 TPP Local Code ## 307927 TPP Local Code ## 307928 TPP Local Code Add the term descriptions to gp_clinical. gp_clinical &lt;- gp_clinical %&gt;% left_join(full_dict) Define the clinical terms to extract from gp_clinical for each biomarker. Each biomarker gets a string to be used in a grepl pattern matching query, and as such different patterns should be separated by ‘|’, brackets used to denote multiple possible patterns to match, and ‘^’ to denote the beginning of the string. BP_codes &lt;- &quot;^246[.cdgABCDEFGJNPQRSTVWXY012345679]|^XaF4[abFLOS]|^XaJ2[EFGH]|^XaKF[xw]|^G20&quot; HDL_codes &lt;- &#39;^44d[23]|^X772M|^44P[5BC]|^XaEVr&#39; LDL_codes &lt;- &#39;^44d[45]|^44P[6DE]|^XaEVs&#39; totchol_codes &lt;- &quot;^44P[.12349HJKZ]|^XE2eD|^XSK14|^XaFs9|^XaIRd|^XaJe9|^XaLux&quot; triglyc_codes &lt;- &#39;^44e|^44Q|^X772O|^XE2q9&#39; fastgluc_codes &lt;- &quot;^44[fg]1&quot; randgluc_codes &lt;- &quot;^44[fg][0\\\\.]|^44TA|^XM0ly&quot; a1c_codes &lt;- &quot;^XaPbt|^XaERp|^X772q|^42W[12345Z\\\\.]\\\\.|^44TB\\\\.&quot; height_weight_BMI_codes &lt;- &quot;^XaCDR|^XaJJH|^XaJqk|^XaZcl|^22K|^229|^22A|^162[23]|^X76CG|^XE1h4|^XM01G|^Xa7wI&quot; blood_creatinine_codes &lt;- &#39;^44J3[.0123z]|^44J[CDF]|XE2q5|XaERc|XaERX|XaETQ|^4Q40.|X771Q&#39; urine_creatinine_codes &lt;- &#39;^46M7&#39; urine_albumin_codes &lt;- &#39;^46N4|^XE2eI|^46N8.|^46W[\\\\.01]|^XE2bw&#39; UACR_codes &lt;- &#39;^46TC|^XE2n3|^X773Y|^46TD|^XE2n4&#39; "],["total-cholesterol.html", "11.1 Total cholesterol", " 11.1 Total cholesterol UK Biobank measurements range from 0.601 to 15.46 mmol/L. We filter the allowable range to lie between 0.5 and 30. totchol &lt;- gp_clinical %&gt;% filter(grepl(totchol_codes, code)) %&gt;% mutate(totchol = coalesce(as.numeric(value1), as.numeric(value2), as.numeric(value3))) %&gt;% filter(totchol &gt; 0.5 &amp; totchol &lt; 30) %&gt;% filter(!(value3 %in% c(&quot;MEA001&quot;, &quot;mg/mmol&quot;, &quot;%&quot;, &quot;MEA090&quot;, &quot;MEA093&quot;, &quot;MEA099&quot;, &quot;MEA110&quot;, &quot;MEA142&quot;, &quot;MEA156&quot;, &quot;mmo&quot;, &quot;mmol&quot;, &quot;mmol/d&quot;, &quot;mOsm/kg&quot;, &quot;mPa/s&quot;, &quot;nmol/l&quot;, &quot;U/mL&quot;, &quot;umol/L&quot;))) totchol %&gt;% group_by(code, term_description) %&gt;% summarize(n=n(), mean = mean(totchol, na.rm=T)) %&gt;% arrange(desc(n)) %&gt;% kable() code term_description n mean XE2eD Serum cholesterol level 910180 5.191951 44P.. Serum cholesterol 295052 5.161988 44PJ. Serum total cholesterol level 63275 5.076448 44PH. Total cholesterol measurement 42449 5.115970 XaJe9 Serum total cholesterol level 40193 5.278462 XaFs9 Fasting cholesterol level 3723 5.641230 XSK14 Total cholesterol measurement 1684 5.282773 XaIRd Plasma total cholesterol level 1476 5.246321 44P3. Serum cholesterol raised 1398 6.421216 44P1. Serum cholesterol normal 1377 4.706652 44PK. Serum fasting total cholesterol 1324 5.220702 44PZ. Serum cholesterol NOS 548 5.445693 XaLux Serum fasting total cholesterol 335 5.373194 44P2. Serum cholesterol borderline 328 5.898506 44P4. Serum cholesterol very high 53 7.779245 44P9. Serum cholesterol studies 15 4.638667 ggplot(data=totchol, aes(x=log10(totchol))) + geom_density() + theme_minimal() "],["hdl.html", "11.2 HDL", " 11.2 HDL UK Biobank measurements range from 0.219 to 4.401 mmol/L. We filter the allowable range to be under 10, but not 0. HDL &lt;- gp_clinical %&gt;% filter(grepl(HDL_codes, code)) %&gt;% mutate(HDL = coalesce(as.numeric(value1), as.numeric(value2), as.numeric(value3))) %&gt;% filter(HDL &gt; 0 &amp; HDL &lt; 10) %&gt;% filter(!(value3 %in% c(&quot;09&quot;, &quot;MEA082&quot;, &quot;MEA095&quot;, &quot;MEA099&quot;, &quot;MEA104&quot;, &quot;MEA151&quot;, &quot;mmol&quot;, &quot;mOsm/kg&quot;, &quot;mg/mmol&quot;))) HDL %&gt;% group_by(code, term_description) %&gt;% summarize(n=n(), mean = mean(HDL, na.rm=T)) %&gt;% arrange(desc(n)) %&gt;% kable() code term_description n mean 44P5. Serum HDL cholesterol level 1042737 1.472108 XaEVr Plasma HDL cholesterol level 8120 1.406047 44PB. Serum fasting HDL cholesterol level 7580 1.545555 44PC. Serum random HDL cholesterol level 731 1.460260 44d3. Plasma fasting HDL cholesterol level 630 1.326984 44d2. Plasma random HDL cholesterol level 344 1.448663 X772M High density lipoprotein cholesterol level 130 1.674154 ggplot(data=HDL, aes(x=log10(HDL))) + geom_density() + theme_minimal() "],["ldl.html", "11.3 LDL", " 11.3 LDL UK Biobank measurements range from 0.226 to 9.797 mmol/L. We filter the allowable range to be under 30, but not 0. LDL &lt;- gp_clinical %&gt;% filter(grepl(LDL_codes, code)) %&gt;% mutate(LDL = coalesce(as.numeric(value1), as.numeric(value2), as.numeric(value3))) %&gt;% filter(LDL &gt; 0 &amp; LDL &lt; 30) %&gt;% filter(!(value3 %in% c(&quot;MEA142&quot;, &quot;MEA151&quot;))) LDL %&gt;% group_by(code, term_description) %&gt;% summarize(n=n(), mean = mean(LDL, na.rm=T)) %&gt;% arrange(desc(n)) %&gt;% kable() code term_description n mean 44P6. Serum LDL cholesterol level 673558 3.034787 XaEVs Plasma LDL cholesterol level 8212 3.213037 44PD. Serum fasting LDL cholesterol level 501 3.395888 44d5. Plasma fasting LDL cholesterol level 274 3.346460 44PE. Serum random LDL cholesterol level 232 3.155948 44d4. Plasma random LDL cholesterol level 36 3.421944 ggplot(data=LDL, aes(x=log10(LDL))) + geom_density() + theme_minimal() "],["triglycerides.html", "11.4 Triglycerides", " 11.4 Triglycerides UK Biobank measurements range from 0.231 to 11.278 mmol/L. We filter the allowable range to be under 30, but not 0. triglycerides &lt;- gp_clinical %&gt;% filter(grepl(triglyc_codes, code)) %&gt;% mutate(triglyc = coalesce(as.numeric(value1), as.numeric(value2), as.numeric(value3))) %&gt;% filter(triglyc &gt; 0 &amp; triglyc &lt; 30) %&gt;% filter(!(value3 %in% c(&quot;g&quot;, &quot;g/l&quot;, &quot;MEA099&quot;, &quot;MEA156&quot;))) triglycerides %&gt;% group_by(code, term_description) %&gt;% summarize(n=n(), mean= mean(triglyc, na.rm=T)) %&gt;% arrange(desc(n)) %&gt;% kable() code term_description n mean XE2q9 Serum triglyceride levels 712076 1.618299 44Q.. Serum triglycerides 312907 1.589418 44e.. Plasma triglyceride level 8750 1.726578 44Q4. Serum fasting triglyceride level 4812 1.636868 X772O Triglyceride level 4444 1.817549 44QZ. Serum triglycerides NOS 877 1.544276 44Q1. Serum triglycerides normal 282 1.263794 44Q3. Serum triglycerides raised 206 3.350194 44e1. Plasma fasting triglyceride level 105 1.995810 44Q2. Serum triglycerides borderline 53 2.015094 44Q5. Serum random triglyceride level 26 1.783846 ggplot(data=triglycerides, aes(x=log10(triglyc))) + geom_density() + theme_minimal() "],["fasting-glucose.html", "11.5 Fasting Glucose", " 11.5 Fasting Glucose UK Biobank measurements for glucose range from 0.995 to 36.813 mmol/L. We filter the allowable range of fasting glucose to be under 60, but not 0. fastgluc &lt;- gp_clinical %&gt;% filter(grepl(fastgluc_codes, code)) %&gt;% mutate(fastgluc = coalesce(as.numeric(value1), as.numeric(value2), as.numeric(value3))) %&gt;% filter(fastgluc &gt; 0 &amp; fastgluc &lt; 60) %&gt;% filter(value3 %in% c(&quot;&quot;, &quot;MEA000&quot;, &quot;MEA061&quot;, &quot;MEA096&quot;, &quot;MEA194&quot;, &quot;Mmol/L&quot;, &quot;Unknown&quot;, &quot;mmol/L&quot;, &quot;mmol/l&quot;, &quot;mU/l&quot;, &quot;units&quot;)) fastgluc %&gt;% group_by(code, term_description) %&gt;% summarize(n=n(), mean = mean(fastgluc, na.rm=T)) %&gt;% arrange(desc(n)) %&gt;% kable() code term_description n mean 44g1. Plasma fasting glucose level 199962 5.548240 44f1. Serum fasting glucose level 45515 5.595539 ggplot(data=fastgluc, aes(x=log10(fastgluc))) + geom_density() + theme_minimal() "],["random-glucose.html", "11.6 Random glucose", " 11.6 Random glucose UK Biobank measurements for glucose range from 0.995 to 36.813 mmol/L. We filter the allowable range of fasting glucose to be under 60, but not 0. randgluc &lt;- gp_clinical %&gt;% filter(grepl(randgluc_codes, code)) %&gt;% mutate(randgluc = coalesce(as.numeric(value1), as.numeric(value2), as.numeric(value3))) %&gt;% filter(randgluc &gt; 0 &amp; randgluc &lt; 60) %&gt;% filter(value3 %in% c(&quot;&quot;, &quot;MEA000&quot;, &quot;MEA061&quot;, &quot;MEA096&quot;, &quot;MEA194&quot;, &quot;Mmol/L&quot;, &quot;Unknown&quot;, &quot;mmol/L&quot;, &quot;mmol/l&quot;, &quot;mU/l&quot;, &quot;units&quot;)) randgluc %&gt;% group_by(code, term_description) %&gt;% summarize(n=n(), mean = mean(randgluc, na.rm=T)) %&gt;% arrange(desc(n)) %&gt;% kable() code term_description n mean XM0ly Plasma glucose level 309834 5.729634 44g.. Plasma glucose level 81044 5.906326 44f.. Serum glucose level 58942 5.639431 44g0. Plasma random glucose level 10730 6.190034 44f0. Serum random glucose level 5099 6.066390 44TA. Plasma glucose 1423 5.997484 ggplot(data = randgluc, aes(x=log10(randgluc))) + geom_density() + theme_minimal() "],["urine-albumin.html", "11.7 Urine Albumin", " 11.7 Urine Albumin UK Biobank measurements for microalbumin in urine have a maximum value of 6746.5 mg/L, with many values below the measurement instrument’s lower limit of detection of 6.7 mg/L. We filter the allowable range to be under 7,000, but not 0. #Extract urine albumin ualb &lt;- gp_clinical %&gt;% filter(grepl(urine_albumin_codes, code, ignore.case=T)) %&gt;% mutate(micro=grepl(&quot;micro&quot;, term_description, ignore.case=T)) %&gt;% mutate(value = coalesce(as.numeric(value1), as.numeric(value2), as.numeric(value3))) %&gt;% filter(!is.na(value) &amp; value != 0) %&gt;% #&amp; value &lt; 500 filter(!(value3 %in% c(&quot;0.3&quot;, &quot;MEA001&quot;, &quot;mg/mmol&quot;, &quot;ml/min&quot;, &quot;mmol/L&quot;, &quot;MEA086&quot;, &quot;MEA096&quot;, &quot;MEA120&quot;, &quot;MEA142&quot;, &quot;MEA166&quot;, &quot;g/L&quot;, &quot;MEA057&quot;))) %&gt;% filter(value &lt; 7000) %&gt;% select(-value1, -value2) %&gt;% dplyr::rename(code_ualb = code, term_description_ualb = term_description, ualb_mg_L = value) %&gt;% distinct() ualb %&gt;% group_by(code_ualb, term_description_ualb) %&gt;% summarize(n=n(), mean = mean(ualb_mg_L)) %&gt;% arrange(desc(n)) %&gt;% kable() code_ualb term_description_ualb n mean XE2eI Urine albumin level 72399 32.51820 XE2bw Urine microalbumin level 52581 33.06640 46N4. Urine albumin 28119 33.41504 46W.. Urine microalbumin 11801 29.60518 46W1. Urine microalbumin negative 304 11.47477 46W0. Urine microalbumin positive 105 64.95429 46N8. Urine microalbumin profile 25 6.35600 Based on the distributions, albumin values are given in mg/L, regardless of whether the term description says microalbumin or albumin. ggplot(data=ualb, aes(x=log10(ualb_mg_L), color = term_description_ualb)) + geom_density() "],["urine-creatinine.html", "11.8 Urine creatinine", " 11.8 Urine creatinine UK Biobank measurements range from 88 to 88,160 micromoles/L. We filter the allowable range to be below 88,000, but not 0. ucreat &lt;- gp_clinical %&gt;% filter(grepl(urine_creatinine_codes, code, ignore.case=T)) %&gt;% mutate(value = coalesce(as.numeric(value1), as.numeric(value2), as.numeric(value3))) %&gt;% filter(!is.na(value) &amp; value != 0) %&gt;% mutate(ucreat_umol_L = value * 1000) %&gt;% filter(value3 != &quot;MEA099&quot; &amp; value3 != &quot;umol/l&quot;) %&gt;% filter(ucreat_umol_L &lt; 88000) %&gt;% select(-value, -value1, -value2, -value3) %&gt;% dplyr::rename(code_ucreat = code, term_description_ucreat = term_description) %&gt;% distinct() ucreat %&gt;% group_by(code_ucreat, term_description_ucreat) %&gt;% summarize(n=n(), mean = mean(ucreat_umol_L)) %&gt;% kable() code_ucreat term_description_ucreat n mean 46M7. Urine creatinine 41123 8799.117 ggplot(data=ucreat, aes(x=log10(log10(ucreat_umol_L)))) + geom_density() + theme_minimal() "],["urine-acr-albumincreatinine-ratio.html", "11.9 Urine ACR (Albumin:Creatinine Ratio)", " 11.9 Urine ACR (Albumin:Creatinine Ratio) This ratio will be needed to define micro/macroalbuminuria phenotypes. The calculated UACR values in UK Biobank lie between 0.15 and 2141.17. For UACR calculated from primary care albumin and creatinine, we only filter based on the original albumin and creatinine measurements. For primary care records of UACR, we filter the value to be below 1000, but not 0. #Manually generate the UACRs from urine creatinine and albumin. ratio_manual &lt;- ualb %&gt;% inner_join(ucreat) %&gt;% mutate(UACR = ualb_mg_L/ucreat_umol_L *1000, manual=T) #Extract UACR from primary care that is already calculated ratio &lt;- gp_clinical %&gt;% filter(grepl(UACR_codes, code, ignore.case=T)) %&gt;% mutate(UACR = coalesce(as.numeric(value1), as.numeric(value2), as.numeric(value3)), micro = grepl(&quot;micro&quot;, term_description), manual = F) %&gt;% filter(!is.na(UACR) &amp; UACR != 0 &amp; UACR &lt; 1000) %&gt;% filter(!(value3 %in% c(&quot;%&quot;, &quot;MEA001&quot;, &quot;MEA083&quot;, &quot;MEA096&quot;, &quot;MEA156&quot;, &quot;MEA169&quot;, &quot;MEA241&quot;, &quot;ml/min&quot;, &quot;mg/L&quot;, &quot;m1/min&quot;, &quot;mmol/L&quot;, &quot;ng/mL&quot;,&quot;umol/L&quot;, &quot;mg/l&quot;))) %&gt;% select(-value1, -value2, -value3) %&gt;% distinct() %&gt;% dplyr::rename(code_uacr = code, term_description_uacr = term_description) #Combine the manually-calculated and already-calculated values of UACR UACR &lt;- full_join(ratio, ratio_manual) %&gt;% distinct(f.eid, event_dt, .keep_all = T) UACR %&gt;% group_by(manual, term_description_uacr, term_description_ualb) %&gt;% summarize(n=n(), mean = mean(UACR, na.rm=T)) %&gt;% arrange(desc(n)) %&gt;% kable() manual term_description_uacr term_description_ualb n mean FALSE Urine albumin/creatinine ratio NA 116580 4.828529 FALSE Urine albumin:creatinine ratio NA 33142 5.069166 TRUE NA Urine albumin 7069 3.213930 TRUE NA Urine microalbumin 3241 4.998741 FALSE Urine microalbumin:creatinine ratio NA 700 9.826057 ggplot(data=UACR, aes(x=log10(UACR))) + geom_density() + theme_minimal() "],["bloodserum-creatinine.html", "11.10 Blood/Serum creatinine", " 11.10 Blood/Serum creatinine This is needed to calculate eGFR. UK Biobank measures lie between 10.7 and 1499.3. We filter the allowable range to lie between 10 and 1500. blood_creatinine &lt;- gp_clinical %&gt;% filter(grepl(blood_creatinine_codes, code)) %&gt;% mutate(blood_creatinine = coalesce(as.numeric(value1), as.numeric(value2))) %&gt;% filter(blood_creatinine &gt; 10 &amp; blood_creatinine &lt; 1500) %&gt;% filter(!(value3 %in% c(&quot;m1/min&quot;, &quot;MEA082&quot;, &quot;MEA083&quot;, &quot;MEA095&quot;, &quot;MEA096&quot;, &quot;mg/mmol&quot;, &quot;ml/min&quot;, &quot;mmol&quot;, &quot;mmol/l&quot;, &quot;mmol/L&quot;, &quot;nmol/l&quot;, &quot;pmol/l&quot;, &quot;uL/cu mm&quot;, &quot;um&quot;, &quot;umo&quot;, &quot;umol&quot;))) %&gt;% mutate(creatinine_type = ifelse(grepl(&quot;serum&quot;, term_description, ignore.case=T), &quot;Serum&quot;, ifelse(grepl(&quot;plasma&quot;, term_description, ignore.case=T), &quot;Plasma&quot;, &quot;Unspecified&quot;))) blood_creatinine %&gt;% group_by(code, term_description) %&gt;% summarize(n=n(), mean=mean(blood_creatinine)) %&gt;% arrange(desc(n)) %&gt;% kable() code term_description n mean XE2q5 Serum creatinine level 1140846 84.55727 44J3. Serum creatinine 513980 82.49880 XaETQ Plasma creatinine level 8762 86.00913 44J3z Serum creatinine NOS 4395 83.70808 44J32 Serum creatinine normal 2776 84.43058 X771Q Creatinine level 418 104.56531 44J33 Serum creatinine raised 380 123.55263 44J31 Serum creatinine low 156 63.65641 44JF. Plasma creatinine level 138 82.04348 4Q40. Creatinine level 57 79.56140 44JD. Corrected serum creatinine level 30 78.10000 44J30 Serum creatinine abnormal 9 97.77778 XaERc Corrected serum creatinine level 5 102.60000 XaERX Corrected plasma creatinine level 4 107.50000 ggplot(data=blood_creatinine, aes(x=blood_creatinine, color=creatinine_type)) + geom_density() + theme_minimal() "],["hba1c.html", "11.11 HbA1c", " 11.11 HbA1c Calculate HbA1c in both % (US) and mmol/mol (UK). UK Biobank measurements lie between 15 and 515.2 mmol/mol. In primary care data, some values are given in percent, some in mmol/mol. We filter the allowable range to lie between 4 and 18 (%) or between 20.2 and 173.2 (mmol/mol) to guard against including values recorded under the incorrect unit. Conversion between % and mmol/mol is performed using the IFCC-NGSP master equation (https://doi.org/10.1373/clinchem.2008.103556). a1c &lt;- gp_clinical %&gt;% filter(grepl(a1c_codes, code)) %&gt;% mutate(hba1c = coalesce(as.numeric(value1), as.numeric(value2), as.numeric(value3))) %&gt;% filter(hba1c &gt; 0) %&gt;% mutate(value3 = toupper(value3)) %&gt;% mutate(value3 = ifelse(value3 %in% c(&quot;MEA000&quot;, &quot;MMOL/M&quot;, &quot;MEA097&quot;, &quot;UNKNOWN&quot;, &quot;MEA001&quot;, &quot;%&quot;, &quot;HBA1C&quot;, &quot;%TOTAL HB&quot;, &quot;% TOTAL HB&quot;, &quot;MEA215&quot;, &quot;MMOL/MOL HB&quot;, &quot;PER CENT&quot;, &quot;%TOTAL&quot;), &quot;&quot;, value3)) %&gt;% mutate(units = ifelse(value3 != &quot;&quot;, value3, ifelse(code %in% c(&quot;XaPbt&quot;, &quot;42W5.&quot;), &quot;MMOL/MOL&quot;, &quot;%&quot;))) %&gt;% filter(units %in% c(&quot;%&quot;, &quot;MMOL/MOL&quot;)) %&gt;% mutate(hba1c_percent = ifelse(units == &quot;%&quot;, round(hba1c, 1), round(hba1c/10.929 + 2.15, 1))) %&gt;% mutate(hba1c_mmol_mol = ifelse(units ==&quot;%&quot;, round(10.929 * (hba1c - 2.15), 1), round(hba1c, 1))) %&gt;% filter(hba1c_percent &gt; 4 &amp; hba1c_percent &lt; 18) %&gt;% dplyr::rename(original_unit = units) a1c %&gt;% group_by(code, term_description) %&gt;% summarize(n=n(), mean=mean(hba1c_percent, na.rm=T)) %&gt;% arrange(desc(n)) %&gt;% kable() code term_description n mean XaPbt Haemoglobin A1c level - International Federation of Clinical Chemistry and Laboratory Medicine standardised 252770 6.563749 XaERp HbA1c level (DCCT aligned) 129570 7.100803 42W5. Haemoglobin A1c level - International Federation of Clinical Chemistry and Laboratory Medicine standardised 98480 6.690495 X772q Haemoglobin A1c level 42743 7.198669 42W4. HbA1c level (DCCT aligned) 23729 7.056766 42W.. Hb. A1C - diabetic control 15924 7.524944 44TB. Haemoglobin A1c level 10418 7.421703 42W2. Hb. A1C 7-10% - borderline 203 8.169458 42W1. Hb. A1C &lt; 7% - good control 195 6.182051 42WZ. Hb. A1C - diabetic control NOS 34 6.767647 42W3. Hb. A1C &gt; 10% - bad control 29 11.082759 ggplot(data=a1c, aes(x = hba1c_percent, color = original_unit)) + geom_density() "],["bmi.html", "11.12 BMI", " 11.12 BMI Height may be measured using meters or centimeters. Height was filtered to lie between 1.25m (4ft 1.2 inches) and 2.1m (6ft 10.7 inches). Values between 125 and 210 were assumed to be in cm and so were divided by 100. Weight is measured in kg and was filtered to lie between 30kg(66.1 lb) and 200kg(440.9 lb). BMI was filtered to lie between 12 and 75 kg/m^2. #Extract height, weight, and BMI hwbmi &lt;- gp_clinical %&gt;% filter(grepl(height_weight_BMI_codes, code)) %&gt;% mutate(value = coalesce(as.numeric(value1), as.numeric(value2), as.numeric(value3))) %&gt;% filter(!is.na(value) &amp; value &gt; 0) %&gt;% mutate(trait = ifelse(grepl(&quot;BMI|Body Mass Index&quot;, term_description, ignore.case=T), &quot;BMI&quot;, ifelse(grepl(&quot;Height&quot;, term_description, ignore.case=T), &quot;Height&quot;, &quot;Weight&quot;))) %&gt;% mutate(value = ifelse(trait == &quot;Height&quot; &amp; value &gt; 2.1, value/100, value)) %&gt;% #cm to meters filter((trait == &quot;Weight&quot; &amp; value &lt; 200 &amp; value &gt; 30) | (trait == &quot;Height&quot; &amp; value &lt; 2.1 &amp; value &gt; 1.25 )| (trait == &quot;BMI&quot; &amp; value &lt; 75 &amp; value &gt; 12)) %&gt;% arrange(f.eid, event_dt) #Here are the resulting terms: hwbmi %&gt;% group_by(code, term_description, trait) %&gt;% summarize(n = n(), mean=round(mean(value), 1)) %&gt;% arrange(trait, desc(n)) %&gt;% kable() code term_description trait n mean 22K.. Body Mass Index BMI 1430129 28.3 22K2. Body Mass Index high K/M2 BMI 654 31.0 22K1. Body Mass Index normal K/M2 BMI 356 22.9 22K4. Body mass index index 25-29 - overweight BMI 317 27.4 22K5. Body mass index 30+ - obesity BMI 203 34.3 XaJqk Body mass index 20-24 - normal BMI 139 23.1 22K3. Body Mass Index low K/M2 BMI 28 18.4 22K8. Body mass index 20-24 - normal BMI 17 23.1 XaCDR Body mass index less than 20 BMI 13 18.5 XaZcl Baseline body mass index BMI 4 33.0 22K6. Body mass index less than 20 BMI 3 19.0 22K7. Body mass index 40+ - severely obese BMI 3 41.9 XaJJH Body mass index 40+ - severely obese BMI 3 42.8 229.. O/E - height Height 946337 1.7 229Z. O/E - height NOS Height 64 1.7 2293. O/E -height within 10% average Height 11 1.7 2292. O/E - height 10-20% &lt; average Height 2 1.6 2291. O/E-height &gt; 20% below average Height 1 1.8 2294. O/E-height 10-20% over average Height 1 1.8 2296. O/E - loss of height Height 1 1.6 22A.. O/E - weight Weight 1575549 80.4 1622. Weight increasing Weight 251 80.8 22A3. O/E - weight within 10% ideal Weight 122 66.4 XM01G Weight observation Weight 110 72.8 22A4. O/E - weight 10-20% over ideal Weight 103 81.5 22AZ. O/E - weight NOS Weight 100 71.7 XE1h4 O/E - weight greater than 20% over ideal Weight 64 100.3 22A5. O/E - weight &gt; 20% over ideal Weight 48 97.7 22A7. Baseline weight Weight 6 99.4 22A6. O/E - Underweight Weight 5 52.2 22A8. Weight loss from baseline weight Weight 2 54.0 22A2. O/E -weight 10-20% below ideal Weight 1 67.0 22AA. Overweight Weight 1 86.0 X76CG Usual body weight Weight 1 117.0 Xa7wI Observation of measures of body weight Weight 1 91.0 #Separate the traits weight &lt;- hwbmi %&gt;% filter(trait == &quot;Weight&quot;) height &lt;- hwbmi %&gt;% filter(trait == &quot;Height&quot;) BMI &lt;- hwbmi %&gt;% filter(trait == &quot;BMI&quot;) #Some records from data provider 2 give weight and BMI bmi_extra &lt;- weight %&gt;% filter(data_provider == 2) %&gt;% mutate(bmi_extra = as.numeric(value3)) %&gt;% filter(!is.na(bmi_extra)) %&gt;% filter(bmi_extra &gt; 12) head(bmi_extra) ## f.eid data_provider event_dt value1 value2 value3 code terminology ## 1: 1000372 2 2016-02-02 63.500 23.0 22A.. read2 ## 2: 1000425 2 2004-02-26 108.50 39.8 22A.. read2 ## 3: 1000425 2 2004-06-04 116.10 42.6 22A.. read2 ## 4: 1000425 2 2005-01-11 110.00 40.4 22A.. read2 ## 5: 1000425 2 2005-08-12 110.00 40.4 22A.. read2 ## 6: 1000425 2 2006-10-25 112.00 41.1 22A.. read2 ## special_dt term_description terminology_note value trait bmi_extra ## 1: FALSE O/E - weight &lt;NA&gt; 63.5 Weight 23.0 ## 2: FALSE O/E - weight &lt;NA&gt; 108.5 Weight 39.8 ## 3: FALSE O/E - weight &lt;NA&gt; 116.1 Weight 42.6 ## 4: FALSE O/E - weight &lt;NA&gt; 110.0 Weight 40.4 ## 5: FALSE O/E - weight &lt;NA&gt; 110.0 Weight 40.4 ## 6: FALSE O/E - weight &lt;NA&gt; 112.0 Weight 41.1 #combine the traits in wider format weight_pre &lt;- weight %&gt;% select(-c(terminology, value1, value2, value3, trait)) %&gt;% dplyr::rename(weight = value, weight_code = code, weight_term_description = term_description) height_pre &lt;- height %&gt;% select(-c(terminology, value1, value2, value3, trait)) %&gt;% dplyr::rename(height = value, height_code = code, height_term_description = term_description) BMI_pre &lt;- BMI %&gt;% select(-c(terminology, value1, value2, value3, trait)) %&gt;% dplyr::rename(BMI = value, BMI_code = code, BMI_term_description = term_description) bmi_extra_pre &lt;- bmi_extra %&gt;% select(-c(terminology, term_description, value1, value2, value3, trait, value)) %&gt;% dplyr::rename(bmi_extra_code = code) joined_bmi &lt;- full_join(weight_pre, height_pre) %&gt;% full_join(BMI_pre) %&gt;% full_join(bmi_extra_pre) head(joined_bmi) ## f.eid data_provider event_dt weight_code special_dt ## 1: 1000050 3 2001-01-24 22A.. FALSE ## 2: 1000050 3 2014-11-25 22A.. FALSE ## 3: 1000068 3 1994-11-30 22A.. FALSE ## 4: 1000068 3 1999-01-07 22A.. FALSE ## 5: 1000068 3 2001-07-20 22A.. FALSE ## 6: 1000068 3 2006-01-18 22A.. FALSE ## weight_term_description terminology_note weight height_code ## 1: O/E - weight &lt;NA&gt; 54.00 229.. ## 2: O/E - weight &lt;NA&gt; 62.00 229.. ## 3: O/E - weight &lt;NA&gt; 70.50 229.. ## 4: O/E - weight &lt;NA&gt; 70.40 229.. ## 5: O/E - weight &lt;NA&gt; 73.64 229.. ## 6: O/E - weight &lt;NA&gt; 80.50 229.. ## height_term_description height BMI_code BMI_term_description BMI ## 1: O/E - height 1.630 22K.. Body Mass Index 20.300 ## 2: O/E - height 1.630 22K.. Body Mass Index 23.335 ## 3: O/E - height 1.690 &lt;NA&gt; &lt;NA&gt; NA ## 4: O/E - height 1.690 &lt;NA&gt; &lt;NA&gt; NA ## 5: O/E - height 1.676 22K.. Body Mass Index 26.200 ## 6: O/E - height 1.680 22K.. Body Mass Index 28.500 ## bmi_extra_code bmi_extra ## 1: &lt;NA&gt; NA ## 2: &lt;NA&gt; NA ## 3: &lt;NA&gt; NA ## 4: &lt;NA&gt; NA ## 5: &lt;NA&gt; NA ## 6: &lt;NA&gt; NA Clean the combined data, filling in missing height values from previous/subsequent measurements or BMI. Filter out cases where the calculated and reported BMI differ by more than 1.5. cleaned_bmi &lt;- joined_bmi %&gt;% group_by(f.eid) %&gt;% fill(height, .direction = &quot;downup&quot;) %&gt;% mutate(BMI_coalesce = round(coalesce(BMI, bmi_extra), 1), BMI_calculated = round(weight/(height^2), 1), BMI_mismatch = BMI_coalesce != BMI_calculated, BMI_diff = BMI_coalesce - BMI_calculated) %&gt;% filter(!(!is.na(BMI_diff) &amp; abs(BMI_diff) &gt; 1.5)) %&gt;% mutate(BMI_final = coalesce(BMI_calculated, BMI_coalesce)) %&gt;% mutate(height = ifelse(!is.na(height), height, sqrt(weight/BMI))) %&gt;% dplyr::rename(BMI_reported = BMI_coalesce, height_carried = height) %&gt;% filter(height_carried &lt; 2.1 &amp; height_carried &gt; 1.25 &amp; BMI_final &lt; 75 &amp; BMI_final &gt; 12) %&gt;% select(f.eid, data_provider, event_dt, weight, height_carried, BMI_reported, BMI_calculated, BMI = BMI_final) %&gt;% distinct() %&gt;% mutate(source=&quot;PC&quot;) ggplot(data=cleaned_bmi, aes(x=log10(BMI))) + geom_density() + theme_minimal() "],["blood-pressure.html", "11.13 Blood Pressure", " 11.13 Blood Pressure To to extract blood pressure, it is necessary to consider both the cases where both Systolic and Diastolic BP are provided in the same record, as well as cases where Systolic and Diastolic BP are given in separate records. bp &lt;- gp_clinical %&gt;% filter(grepl(BP_codes, code)) %&gt;% filter(value1 != &quot;&quot; | value2 != &quot;&quot; | value3 != &quot;&quot;) %&gt;% mutate(value1 = as.numeric(value1), value2 = as.numeric(value2), value3 = as.numeric(value3)) #Remove some small values in value3 of unknown meaning bp$value3[bp$value3 &lt; 10] &lt;- NA #Separate the data into two types of record: One where 2 values are given in 1 record (e.g. Systolic and Diastolic) and another where there is only one value (i.e Systolic only or Diastolic only) given per record. Multiple values per record: Take the larger value to be systolic and the smaller value to be diastolic. Filter out any records where either of these values are 0. bp_mult &lt;- bp %&gt;% rowwise() %&gt;% filter(sum(!is.na(value1), !is.na(value2), !is.na(value3)) == 2) %&gt;% ungroup() %&gt;% mutate(Systolic_bp_pc = pmax(value1, value2, value3, na.rm=T)) %&gt;% mutate(Diastolic_bp_pc = pmin(value1, value2, value3, na.rm=T)) %&gt;% filter(Systolic_bp_pc != 0 &amp; Diastolic_bp_pc != 0) One value per record: filter out those with a value of 0. bp_single &lt;- bp %&gt;% rowwise() %&gt;% filter(sum(!is.na(value1), !is.na(value2), !is.na(value3)) == 1) %&gt;% ungroup() %&gt;% mutate(value = coalesce(value1, value2, value3)) %&gt;% filter(value != 0) %&gt;% arrange(f.eid, event_dt) %&gt;% mutate(bp_type = ifelse(grepl(&quot;systolic&quot;, term_description, ignore.case=T), &quot;Systolic_bp_pc&quot;, ifelse(grepl(&quot;diastolic&quot;, term_description, ignore.case = T), &quot;Diastolic_bp_pc&quot;, &quot;Unknown&quot;))) %&gt;% select(-value1, -value2, -value3) %&gt;% distinct() #Here are the results for single type: bp_single %&gt;% group_by(code, term_description, bp_type) %&gt;% summarize(n=n(), mean=round(mean(value, 1))) %&gt;% arrange(bp_type, desc(n)) ## # A tibble: 33 × 5 ## # Groups: code, term_description [33] ## code term_description bp_type n mean ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 246A. O/E - Diastolic BP reading Diastolic_b… 3.13e6 80 ## 2 XaJ2F Sitting diastolic blood pressure Diastolic_b… 3.78e3 80 ## 3 XaKFw Average home diastolic blood pressure Diastolic_b… 3.54e3 79 ## 4 XaF4b Average 24 hour diastolic blood pressure Diastolic_b… 1.72e3 79 ## 5 XaF4a Average day interval diastolic blood pressure Diastolic_b… 8.73e2 83 ## 6 246R. Sitting diastolic blood pressure Diastolic_b… 5.49e2 82 ## 7 XaJ2H Lying diastolic blood pressure Diastolic_b… 4.88e2 80 ## 8 246c. Average home diastolic blood pressure Diastolic_b… 1.08e2 82 ## 9 XaF4S Average diastolic blood pressure Diastolic_b… 8.5 e1 81 ## 10 246V. Average 24 hour diastolic blood pressure Diastolic_b… 1.1 e1 91 ## # … with 23 more rows Look at the remaining codes to see if they are systolic or diastolic. For many of these, the same code is given twice, each with a different value. Sometimes an record is a duplicate of a systolic or diastolic measurement. If there are two unique values given per ID/date, then we can assume they are systolic (higher) and diastolic (lower). Otherwise, discard that set of values. #Unknowns - not specified as Diastolic vs. Systolic unknowns &lt;- bp_single %&gt;% group_by(f.eid, event_dt) %&gt;% filter(sum(bp_type == &quot;Unknown&quot;) &gt; 0) %&gt;% mutate(n = length(unique(value))) %&gt;% filter(n == 2) %&gt;% mutate(Systolic_bp_pc = max(value)) %&gt;% mutate(Diastolic_bp_pc = min(value)) %&gt;% distinct(f.eid, event_dt, value, .keep_all = T) %&gt;% group_by(f.eid, event_dt) %&gt;% mutate(code_systolic = code[which(value == max(value))], code_diastolic = code[which(value == min(value))], term_description_systolic = term_description[which(value == max(value))], term_description_diastolic = term_description[which(value == min(value))]) #Prepare for merging bp_single_less &lt;- bp_single %&gt;% distinct(f.eid, data_provider, event_dt, value, bp_type, .keep_all = T) %&gt;% group_by(f.eid, event_dt) %&gt;% filter(sum(bp_type == &quot;Systolic_bp_pc&quot;) == 1 &amp; sum(bp_type == &quot;Diastolic_bp_pc&quot;) == 1) %&gt;% filter(bp_type != &quot;Unknown&quot;) systolic &lt;- bp_single_less %&gt;% filter(bp_type == &quot;Systolic_bp_pc&quot;) %&gt;% dplyr::rename(code_systolic = code, Systolic_bp_pc = value, term_description_systolic = term_description) %&gt;% select(-bp_type) diastolic &lt;- bp_single_less %&gt;% filter(bp_type == &quot;Diastolic_bp_pc&quot;) %&gt;% dplyr::rename(code_diastolic = code, Diastolic_bp_pc = value, term_description_diastolic = term_description) %&gt;% select(-bp_type) bp_single_wide &lt;- full_join(systolic, diastolic) head(bp_single_wide) ## # A tibble: 6 × 12 ## # Groups: f.eid, event_dt [6] ## f.eid data_provider event_dt code_systolic terminology special_dt ## &lt;int&gt; &lt;int&gt; &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;lgl&gt; ## 1 1000050 3 2007-04-25 2469. read3 FALSE ## 2 1000050 3 2014-11-25 2469. read3 FALSE ## 3 1000068 3 1994-11-30 2469. read3 FALSE ## 4 1000068 3 1999-01-07 2469. read3 FALSE ## 5 1000068 3 2001-07-20 2469. read3 FALSE ## 6 1000068 3 2001-11-21 2469. read3 FALSE ## # … with 6 more variables: term_description_systolic &lt;chr&gt;, ## # terminology_note &lt;chr&gt;, Systolic_bp_pc &lt;dbl&gt;, code_diastolic &lt;chr&gt;, ## # term_description_diastolic &lt;chr&gt;, Diastolic_bp_pc &lt;dbl&gt; Combine each of the cleaned subsets and implement some common sense filters (45 &lt; Systolic bp &lt; 300, 30 &lt; Diastolic bp &lt; Systolic bp) unknowns_less &lt;- unknowns %&gt;% select(-term_description, -value, -bp_type, -code, -n) %&gt;% distinct() bp_mult_less &lt;- bp_mult %&gt;% dplyr::rename(term_description_both = term_description) %&gt;% dplyr::rename(code_both = code) %&gt;% select(f.eid, event_dt, data_provider, terminology, Systolic_bp_pc, Diastolic_bp_pc, code_both, term_description_both) %&gt;% distinct() full_bp_clean &lt;- full_join(unknowns_less, bp_single_wide) %&gt;% full_join(bp_mult_less) %&gt;% filter(Systolic_bp_pc &gt; Diastolic_bp_pc) %&gt;% filter(Systolic_bp_pc &gt;= 45 &amp; Systolic_bp_pc &lt;= 300) %&gt;% filter(Diastolic_bp_pc &gt;= 30) %&gt;% distinct(f.eid, event_dt, Systolic_bp_pc, Diastolic_bp_pc, .keep_all=T) ## Joining, by = c(&quot;f.eid&quot;, &quot;data_provider&quot;, &quot;event_dt&quot;, &quot;terminology&quot;, &quot;special_dt&quot;, &quot;terminology_note&quot;, &quot;Systolic_bp_pc&quot;, &quot;Diastolic_bp_pc&quot;, &quot;code_systolic&quot;, &quot;code_diastolic&quot;, &quot;term_description_systolic&quot;, &quot;term_description_diastolic&quot;) ## Joining, by = c(&quot;f.eid&quot;, &quot;data_provider&quot;, &quot;event_dt&quot;, &quot;terminology&quot;, &quot;Systolic_bp_pc&quot;, &quot;Diastolic_bp_pc&quot;) head(full_bp_clean) ## # A tibble: 6 × 14 ## # Groups: f.eid, event_dt [6] ## f.eid data_provider event_dt terminology special_dt terminology_note ## &lt;int&gt; &lt;int&gt; &lt;date&gt; &lt;chr&gt; &lt;lgl&gt; &lt;chr&gt; ## 1 1000578 2 2002-08-07 read2 FALSE &lt;NA&gt; ## 2 1000578 2 2003-02-10 read2 FALSE &lt;NA&gt; ## 3 1000602 3 2007-09-28 read3 FALSE &lt;NA&gt; ## 4 1017110 2 2003-02-26 read2 FALSE &lt;NA&gt; ## 5 1017110 2 2003-06-04 read2 FALSE &lt;NA&gt; ## 6 1017110 2 2004-03-24 read2 FALSE &lt;NA&gt; ## # … with 8 more variables: Systolic_bp_pc &lt;dbl&gt;, Diastolic_bp_pc &lt;dbl&gt;, ## # code_systolic &lt;chr&gt;, code_diastolic &lt;chr&gt;, term_description_systolic &lt;chr&gt;, ## # term_description_diastolic &lt;chr&gt;, code_both &lt;chr&gt;, ## # term_description_both &lt;chr&gt; ggplot(data=full_bp_clean, aes(x=log10(Systolic_bp_pc))) + geom_density() + theme_minimal() ggplot(data=full_bp_clean, aes(x=log10(Diastolic_bp_pc))) + geom_density() + theme_minimal() "],["reformat-and-trim-trajectory-table-for-each-biomarker.html", "11.14 Reformat and trim trajectory table for each biomarker", " 11.14 Reformat and trim trajectory table for each biomarker sbp &lt;- full_bp_clean %&gt;% select(f.eid,Systolic_bp_pc,event_dt) %&gt;% rename(measurement = Systolic_bp_pc) %&gt;% mutate(biomarker = &quot;sbp&quot;) dbp &lt;- full_bp_clean %&gt;% select(f.eid,Diastolic_bp_pc,event_dt) %&gt;% rename(measurement = Diastolic_bp_pc) %&gt;% mutate(biomarker = &quot;dbp&quot;) cholesterol &lt;- totchol %&gt;% select(f.eid,totchol,event_dt) %&gt;% rename(measurement = totchol) %&gt;% mutate(biomarker = &quot;chol&quot;) hdl &lt;- HDL %&gt;% select(f.eid,HDL,event_dt) %&gt;% rename(measurement = HDL) %&gt;% mutate(biomarker = &quot;hdl&quot;) ldl &lt;- LDL %&gt;% select(f.eid,LDL,event_dt) %&gt;% rename(measurement = LDL) %&gt;% mutate(biomarker = &quot;ldl&quot;) trigly &lt;- triglycerides %&gt;% select(f.eid,triglyc,event_dt) %&gt;% rename(measurement = triglyc) %&gt;% mutate(biomarker = &quot;trig&quot;) glu_fast &lt;- fastgluc %&gt;% select(f.eid,fastgluc,event_dt) %&gt;% rename(measurement = fastgluc) %&gt;% mutate(biomarker = &quot;glucose_fast&quot;) glu_rand &lt;- randgluc %&gt;% select(f.eid,randgluc,event_dt) %&gt;% rename(measurement = randgluc) %&gt;% mutate(biomarker = &quot;glucose_rand&quot;) hba1c &lt;- a1c %&gt;% select(f.eid,hba1c_mmol_mol,event_dt) %&gt;% rename(measurement = hba1c_mmol_mol) %&gt;% mutate(biomarker = &quot;hba1c&quot;) bmi &lt;- cleaned_bmi %&gt;% select(f.eid,BMI,event_dt) %&gt;% rename(measurement = BMI) %&gt;% mutate(biomarker = &quot;bmi&quot;) blood_creat &lt;- blood_creatinine %&gt;% select(f.eid,blood_creatinine,event_dt) %&gt;% rename(measurement = blood_creatinine) %&gt;% mutate(biomarker = &quot;creat_blood&quot;) uacr &lt;- UACR %&gt;% select(f.eid,UACR,event_dt) %&gt;% rename(measurement = UACR) %&gt;% mutate(biomarker = &quot;uacr&quot;) Combine all of biomarker trajectory datasets into a long format. biomarker_traj_tab_long &lt;- bind_rows(list(sbp,dbp,cholesterol,hdl,ldl,trigly, glu_fast,glu_rand,hba1c,bmi,blood_creat,uacr)) Create macro/microalbuminuria event table albuminuria_event_tab &lt;- biomarker_traj_tab_long %&gt;% filter(biomarker == &quot;uacr&quot;) %&gt;% mutate(macroalbuminuria = ifelse(measurement &lt; 33.9,F,T), microalbuminuria = ifelse(measurement &lt; 3.4,F,T)) %&gt;% select(f.eid,event_dt,macroalbuminuria,microalbuminuria) %&gt;% pivot_longer(cols=c(macroalbuminuria,microalbuminuria),values_to = &quot;event&quot;, names_to = &quot;type&quot;) %&gt;% select(f.eid,event,event_dt,type) Filter out from biomarker trajectory table and albuminuria event table: any unknown date of event any unknown measurements (only applies to biomarker trajectory table) biomarker_traj_tab_long &lt;- biomarker_traj_tab_long[!is.na(biomarker_traj_tab_long$event_dt),] biomarker_traj_tab_long &lt;- biomarker_traj_tab_long[!is.na(biomarker_traj_tab_long$measurement),] albuminuria_event_tab &lt;- albuminuria_event_tab[!is.na(albuminuria_event_tab$event_dt),] Save the biomarker trajectory data and albuminuria event table extracted from the primary care data saveRDS(biomarker_traj_tab_long,&quot;generated_data/biomarker_trajectory_pcp.RDS&quot;) saveRDS(albuminuria_event_tab,&quot;generated_data/albuminuria_event_tab_pcp.RDS&quot;) "],["traj-combine.html", "12 Combine biomarker trajectory extracted from from UKB and PCP data", " 12 Combine biomarker trajectory extracted from from UKB and PCP data library(tidyverse) source(&quot;functions.R&quot;) Load UKB and PCP biomarker trajectory data biomarker_traj_pcp &lt;- readRDS(&quot;generated_data/biomarker_trajectory_pcp.RDS&quot;) biomarker_traj_ukb &lt;- readRDS(&quot;generated_data/biomarker_trajectory_ukb.RDS&quot;) Combine UKB and PCP biomarker trajectory data biomarker_traj &lt;- bind_rows(biomarker_traj_pcp,biomarker_traj_ukb %&gt;% select(-visit)) biomarker_traj &lt;- biomarker_traj %&gt;% distinct() Load UKB and PCP albuminuria event table albuminuria_event_tab_pcp &lt;- readRDS(&quot;generated_data/albuminuria_event_tab_pcp.RDS&quot;) albuminuria_event_tab_ukb &lt;- readRDS(&quot;generated_data/albuminuria_event_tab_ukb.RDS&quot;) Combine albuminuria event tables albuminuria_event_tab &lt;- bind_rows(albuminuria_event_tab_pcp,albuminuria_event_tab_ukb) %&gt;% distinct() Create micro and microalbuminuria first identification event table microabu_firstoccur &lt;- albuminuria_event_tab %&gt;% filter(type == &quot;microalbuminuria&quot;,event == T) %&gt;% select(f.eid,event,event_dt) %&gt;% group_by(f.eid) %&gt;% arrange(event_dt) %&gt;% slice(1) macroabu_firstoccur &lt;- albuminuria_event_tab %&gt;% filter(type == &quot;macroalbuminuria&quot;,event == T) %&gt;% select(f.eid,event,event_dt) %&gt;% group_by(f.eid) %&gt;% arrange(event_dt) %&gt;% slice(1) Load demographic table demog &lt;- readRDS(&quot;generated_data/demog_selected.RDS&quot;) Compute eGFR and create eGFR trajectory data creat_blood_traj &lt;- biomarker_traj[biomarker_traj$biomarker == &quot;creat_blood&quot;,] %&gt;% left_join(demog %&gt;% select(f.eid, SEX, DOB)) creat_blood_traj$age_egfr &lt;- lubridate::decimal_date(creat_blood_traj$event_dt) - lubridate::decimal_date(creat_blood_traj$DOB) creat_blood_traj$measurement_egfr &lt;- mapply(compute_egfr,creat_blood_traj$measurement,creat_blood_traj$age_egfr,creat_blood_traj$SEX) egfr_traj &lt;- creat_blood_traj %&gt;% select(f.eid,measurement_egfr,event_dt) %&gt;% rename(measurement = measurement_egfr) %&gt;% mutate(biomarker = &quot;egfr&quot;) egfr_traj &lt;- egfr_traj[!is.na(egfr_traj$measurement),] Define a “prolonged low eGFR event” as as an event with two or more low eGFR event (eGFR &lt; 60) for more than 90 days without a normal eGFR in between (which can be ascertained only when we have at least two low eGFR event 90 days apart). low_egfr_firstoccur contains the first occurrence date of the “prolonged low eGFR event.” This event table will be used in phenotyping DKD cases later. prolonged_low_egfr_firstoccur &lt;- egfr_traj %&gt;% mutate(eGFR_lt60 = ifelse(measurement &lt; 60, 1, 0)) %&gt;% group_by(f.eid) %&gt;% arrange(f.eid, event_dt) %&gt;% mutate(switched = eGFR_lt60 != lag(eGFR_lt60)) %&gt;% mutate(run_n = cumsum(ifelse(is.na(switched), 0, switched))) %&gt;% group_by(f.eid, run_n) %&gt;% mutate(max_days = (lubridate::decimal_date(max(event_dt, na.rm=T)) - lubridate::decimal_date(min(event_dt, na.rm=T)))*365.25) %&gt;% filter(eGFR_lt60 &amp; max_days &gt;=90) %&gt;% # for a subject with only one event of egfr &lt; 60, then we would have max_days = 0 ungroup() %&gt;% group_by(f.eid) %&gt;% arrange(event_dt) %&gt;% slice(1) %&gt;% # selecting for the start date of the first period where a subject had egfr level less 60 for # 90+ days. ungroup() %&gt;% select(f.eid, event_dt) Add eGFR trajectory data to biomarker_traj biomarker_traj &lt;- bind_rows(biomarker_traj,egfr_traj) biomarker_traj &lt;- biomarker_traj[!is.na(biomarker_traj$measurement) &amp; !is.na(biomarker_traj$event_dt),] Break up biomarker trajectory table per biomarker biomarker_traj_list_per_biomarker &lt;- lapply(unique(biomarker_traj$biomarker),function(biomarker){ biomarker_traj[biomarker_traj$biomarker == biomarker,] }) names(biomarker_traj_list_per_biomarker) &lt;- unique(biomarker_traj$biomarker) Save biomarker trajectory table saveRDS(biomarker_traj,&quot;generated_data/biomarker_trajectory.RDS&quot;) Save trajectory table for each biomarker for(i in 1:length(biomarker_traj_list_per_biomarker)){ biomarker &lt;- names(biomarker_traj_list_per_biomarker)[i] saveRDS(biomarker_traj_list_per_biomarker[[i]],paste0(&quot;generated_data/&quot;,&quot;trajectory_&quot;,biomarker,&quot;.RDS&quot;)) } Save albuminuria table saveRDS(albuminuria_event_tab,&quot;generated_data/albuminuria_event_tab.RDS&quot;) Save macroalbuminuria and microalbuminuria first occurrence table saveRDS(macroabu_firstoccur,&quot;generated_data/macroabu_firstoccur.RDS&quot;) saveRDS(microabu_firstoccur,&quot;generated_data/microabu_firstoccur.RDS&quot;) Save prolonged low eGFR first occurrence table saveRDS(prolonged_low_egfr_firstoccur,&quot;generated_data/prolonged_low_egfr_firstoccur.RDS&quot;) "],["phenotype-outcome-combine.html", "13 Phenotype outcomes using combination of tables", " 13 Phenotype outcomes using combination of tables We achieve the following: Generate diabetes first occurrence and multiple event tables by combining: diabetes event tables obtained from the UKB assessment center data (phenotype_outcome_events_ukb.Rmd) diabetes event tables obtained from the primary care data (phenotype_outcome_events_pcp.Rmd) Generate diabetic eye disease first occurrence event table by combining: diabetes event tables obtained from the UKB assessment center data (phenotype_outcome_events_ukb.Rmd) diabetes event tables obtained from primary care data (phenotype_outcome_events_pcp.Rmd) Generate advanced chronic kidney disease or diabetic kidney disease first occurrence event table by combining: diabetic kidney disease event table obtained from the UKB assesment center data (phenotype_outcome_events_ukb.Rmd) kidney disease case multiple event table obtained from the primary care data (phenotype_outcome_events_pcp.Rmd) low creatinine level event table obatained from the biomarker data (compute_egfr.Rmd in phenotype_biomarkers/compute_egfr) macroalbuminuria first occurrence event table obtained from the biomarker data (compute_acr_albuminuria.Rmd in phenotype_biomarkers/compute_acr_albuminuria) Input and output files: Input: dm_pc.RDS dm_ukb.RDS dr_pc.RDS dr_firstoccur_ukb.RDS kidney_disease_case_pc.RDS dkd_ukb.RDS low_comb_creat.RDS micro_macro_albuminuria_event_tab.RDS Output: dm.RDS dm_firstoccur.RDS dr_firstoccur.RDS dkd_firstoccur.RDS library(tidyverse) library(data.table) The following outcomes require event tables originating from UKB assessment center data and primary care data Diabetes (DM) Diabetic eye disease (DR) Diabetic Kidney Disease (CKD) In particular, phenotyping CKD requires additional event table obtained from using biomarker data. "],["dm-2.html", "13.1 DM", " 13.1 DM Load the following datasets: diabetes multiple event table from PCP data diabetes multiple event table from UKB assessment center data dm_pc &lt;- readRDS(&quot;generated_data/dm_pc.RDS&quot;) dm_ukb &lt;- readRDS(&quot;generated_data/dm_ukb.RDS&quot;) Create DM multiple and first occurrence event tables dm &lt;- dm_pc %&gt;% full_join(dm_ukb) %&gt;% distinct() %&gt;% arrange(f.eid,event_dt) ## Joining, by = c(&quot;f.eid&quot;, &quot;event_dt&quot;) dm_firstoccur &lt;- dm %&gt;% group_by(f.eid) %&gt;% arrange(event_dt) %&gt;% slice(1) %&gt;% ungroup() saveRDS(dm,&quot;generated_data/dm.RDS&quot;) saveRDS(dm_firstoccur,&quot;generated_data/dm_firstoccur.RDS&quot;) "],["dr-2.html", "13.2 DR", " 13.2 DR Load the following datasets: diabetic eye disease multiple event table from PCP data diabetic eye disease first occurrence event table from UKB assessment center data dr_pc &lt;- readRDS(&quot;generated_data/dr_pc.RDS&quot;) dr_firstoccur_ukb &lt;- readRDS(&quot;generated_data/dr_firstoccur_ukb.RDS&quot;) Create diabetic eye disease first occurrence event table (we are not generating multiple event table for DR) dr_firstoccur &lt;- dr_pc %&gt;% full_join(dr_firstoccur_ukb) %&gt;% group_by(f.eid) %&gt;% arrange(event_dt) %&gt;% slice(1) %&gt;% ungroup() ## Joining, by = c(&quot;f.eid&quot;, &quot;event_dt&quot;) saveRDS(dr_firstoccur,&quot;generated_data/dr_firstoccur.RDS&quot;) "],["dkd.html", "13.3 DKD", " 13.3 DKD Load the following datasets: kidney disease case multiple event table from PCP data diabetic kidney disease multiple event table from UKB assessment center data “prolonged low eGFR” first occurrence event table (see the phenotype_biomarkers folder for the definition of the “prolonged low eGFR”) macroabuminuria first occurrence event table kidney_disease_case_pc &lt;- readRDS(&quot;generated_data/kidney_disease_case_pc.RDS&quot;) dkd_ukb &lt;- readRDS(&quot;generated_data/dkd_ukb.RDS&quot;) prolonged_low_egfr_firstoccur &lt;- readRDS(&quot;generated_data/prolonged_low_egfr_firstoccur.RDS&quot;) macroabu_firstoccur &lt;- readRDS(&quot;generated_data/macroabu_firstoccur.RDS&quot;) Next, we create the following event tables using low_egfr_firstoccur and macroabu_firstoccur to capture additional DKD cases. prolonged_low_egfr_firstoccur &lt;- prolonged_low_egfr_firstoccur %&gt;% filter(!is.na(event_dt)) macroabu_firstoccur &lt;- macroabu_firstoccur %&gt;% filter(!is.na(event_dt)) %&gt;% select(f.eid,event_dt) Finally, we merge the following event tables to generate first occurrence diabetic kidney disease event table: kidney disease case multiple event table from PCP data diabetic kidney disease multiple event table from UKB assessment center data “prolonged low eGFR” first occurrence event table macroabuminuria first occurrence event table dkd_firstoccur &lt;- kidney_disease_case_pc %&gt;% full_join(dkd_ukb) %&gt;% full_join(prolonged_low_egfr_firstoccur) %&gt;% full_join(macroabu_firstoccur) %&gt;% filter(!is.na(event_dt)) %&gt;% group_by(f.eid) %&gt;% arrange(event_dt) %&gt;% slice(1) %&gt;% ungroup() ## Joining, by = c(&quot;f.eid&quot;, &quot;event_dt&quot;) ## Joining, by = c(&quot;f.eid&quot;, &quot;event_dt&quot;) ## Joining, by = c(&quot;f.eid&quot;, &quot;event_dt&quot;) saveRDS(dkd_firstoccur,&quot;generated_data/dkd_firstoccur.RDS&quot;) "],["tte-macro.html", "14 Generate time-to-event data for macrovascular diabetes complications", " 14 Generate time-to-event data for macrovascular diabetes complications Diabetes first occurrence event table (dm_firstoccur.RDS) was generated in phenotype_outcome_events_combine and the demographic data (demog_selected.RDS) was generated in prep_ukb_assessment. Here are the mascrovascular diabetic complications and their time-to-event datasets we are phenotyping: Myocardial Infarction (MI) Unstable Angina Ischemic Stroke Hemorrhagic Stroke Stroke PCI Composite CVD The following table shows macrovascular complication event table files and where they were generated: Macrovascular complication outcome file folder Myocardial Infarction (MI) mi_firstoccur_ukb.RDS phenotype_events_ukb Unstable Angina unstable_angina_ukb.RDS phenotype_events_ukb Ischemic Stroke stroke_infarct_firstoccur_ukb.RDS phenotype_events_ukb Hemorrhagic Stroke stroke_hem_firstoccur_ukb.RDS phenotype_events_ukb Stroke stroke_ukb.RDS phenotype_events_ukb PCI pci_firstoccur_ukb.RDS phenotype_events_ukb Composite CVD cvd_firstoccur_ukb.RDS phenotype_events_ukb The following table shows macrovascular complications and associated control exclusion criteria: Macrovascular complication Control exclusion outcome Myocardial Infarction cardiovascular control exclusion events Unstable Angina Ischemic Stroke cerebrovascular control exclusion events Hemorrhagic Stroke cerebrovascular control exclusion events Stroke cerebrovascular control exclusion events PCI non-coronary revascularization procedure control exclusion events Composite CVD control exclusion events associated with MI, Ischmic stroke, unstable angina and PCI The following table shows control exclusion event table files and where they were generated: Control exclusion outcome file folder cardiovascular control exclusion events cardio_control_exclusion_events_ukb.RDS phenotype_events_ukb cerebrovascular control exclusion events cerebro_control_exclusion_events_ukb.RDS phenotype_events_ukb non-coronary revascularization procedure control exclusion events other_revas_control_exclusion_events_ukb.RDS phenotype_events_ukb Applying these exclusion criteria to initial time-to-event data gives us the final time-to-event data for macrovascular diabetic complications. library(tidyverse) library(data.table) source(&quot;functions.R&quot;) Load phenotyped DM data dm_firstoccur &lt;- readRDS(&quot;generated_data/dm_firstoccur.RDS&quot;) Load demographic data demog &lt;- readRDS(&quot;generated_data/demog_selected.RDS&quot;) "],["mi-1.html", "14.1 MI", " 14.1 MI Load MI first occurrence data phenotyped from UKB assessment data mi_firstoccur_ukb &lt;- readRDS(&quot;generated_data/mi_firstoccur_ukb.RDS&quot;) %&gt;% select(f.eid,event_dt) Load cardiovascular event table that will be used to exclude controls cardio &lt;- readRDS(&quot;generated_data/cardio_control_exclusion_events_ukb.RDS&quot;) Define control exclusion subject IDs ctrl_exclusion_ids_cardio &lt;- cardio$f.eid %&gt;% unique Phenotype time-to-event mi_tte &lt;- phenotype_time_to_event(dm_firstoccur, mi_firstoccur_ukb, demog, control_exclusion_ids = ctrl_exclusion_ids_cardio) saveRDS(mi_tte,&quot;generated_data/mi_tte.RDS&quot;) "],["unstable-angina-1.html", "14.2 Unstable angina", " 14.2 Unstable angina Load unstable angina first occurrence data phenotyped from UKB assessment data unstable_angina_firstoccur_ukb &lt;- readRDS(&quot;generated_data/unstable_angina_firstoccur_ukb.RDS&quot;) %&gt;% select(f.eid,event_dt) Phenotype time-to-event unstable_angina_tte &lt;- phenotype_time_to_event(dm_firstoccur,unstable_angina_firstoccur_ukb,demog) saveRDS(unstable_angina_tte,&quot;generated_data/unstable_angina_tte.RDS&quot;) "],["ischemic-stroke-1.html", "14.3 Ischemic stroke", " 14.3 Ischemic stroke Load ischemic stroke first occurrence data phenotyped from UKB assessment data ischemic_stroke_firstoccur_ukb &lt;- readRDS(&quot;generated_data/stroke_infarct_firstoccur_ukb.RDS&quot;) Load cerebrovascular event table that will be used to exclude controls cerebro &lt;- readRDS(&quot;generated_data/cerebro_control_exclusion_events_ukb.RDS&quot;) Define control exclusion subject IDs ctrl_exclusion_ids_cerebro &lt;- cerebro$f.eid %&gt;% unique Phenotype time-to-event ischemic_stroke_tte &lt;- phenotype_time_to_event(dm_firstoccur,ischemic_stroke_firstoccur_ukb,demog, control_exclusion_ids = ctrl_exclusion_ids_cerebro) saveRDS(ischemic_stroke_tte,&quot;generated_data/ischemic_stroke_tte.RDS&quot;) "],["hemorrhagic-stroke-1.html", "14.4 Hemorrhagic Stroke", " 14.4 Hemorrhagic Stroke Load hemorrhagic stroke first occurrence data phenotyped from UKB assessment data hem_stroke_firstoccur_ukb &lt;- readRDS(&quot;generated_data/stroke_hem_firstoccur_ukb.RDS&quot;) Load cerebrovascular event table that will be used to exclude controls cerebro &lt;- readRDS(&quot;generated_data/cerebro_control_exclusion_events_ukb.RDS&quot;) Define control exclusion subject IDs ctrl_exclusion_ids_cerebro &lt;- cerebro$f.eid %&gt;% unique Phenotype time-to-event hem_stroke_tte &lt;- phenotype_time_to_event(dm_firstoccur,hem_stroke_firstoccur_ukb,demog, control_exclusion_ids = ctrl_exclusion_ids_cerebro) saveRDS(hem_stroke_tte,&quot;generated_data/hem_stroke_tte.RDS&quot;) "],["stroke-1.html", "14.5 Stroke", " 14.5 Stroke Load stroke first occurrence data phenotyped from UKB assessment data stroke_firstoccur_ukb &lt;- readRDS(&quot;generated_data/stroke_firstoccur_ukb.RDS&quot;) Load cerebrovascular event table that will be used to exclude controls cerebro &lt;- readRDS(&quot;generated_data/cerebro_control_exclusion_events_ukb.RDS&quot;) Define control exclusion subject IDs ctrl_exclusion_ids_cerebro &lt;- cerebro$f.eid %&gt;% unique Phenotype time-to-event stroke_tte &lt;- phenotype_time_to_event(dm_firstoccur,stroke_firstoccur_ukb,demog, control_exclusion_ids = ctrl_exclusion_ids_cerebro) saveRDS(stroke_tte,&quot;generated_data/stroke_tte.RDS&quot;) "],["pci-1.html", "14.6 PCI", " 14.6 PCI Load PCI first occurrence data phenotyped from UKB assessment data pci_firstoccur_ukb &lt;- readRDS(&quot;generated_data/pci_firstoccur_ukb.RDS&quot;) Load non-coronary revascularization event table that will be used to exclude controls other_revas &lt;- readRDS(&quot;generated_data/other_revas_control_exclusion_events_ukb.RDS&quot;) Define control exclusion subject IDs ctrl_exclusion_ids_other_revas &lt;- other_revas$f.eid %&gt;% unique Phenotype time-to-event pci_tte &lt;- phenotype_time_to_event(dm_firstoccur,pci_firstoccur_ukb,demog, control_exclusion_ids = ctrl_exclusion_ids_other_revas) saveRDS(pci_tte,&quot;generated_data/pci_tte.RDS&quot;) "],["composite-cvd-mi-unstable-angina-ischemic-stroke-pci-or-cvd-death.html", "14.7 Composite CVD (MI, Unstable Angina, Ischemic Stroke, PCI or CVD death)", " 14.7 Composite CVD (MI, Unstable Angina, Ischemic Stroke, PCI or CVD death) Load composite CVD first occurrence data phenotyped from UKB assessment data cvd_firstoccur_ukb &lt;- readRDS(&quot;generated_data/cvd_firstoccur_ukb.RDS&quot;) Create control exclusion table for CVD. They are combination of cardio, cerebro and other revasculrization events that were used to exclude controls when phenotyping MI, unstable angina, ischemic sstroke and PCI time-to-event data. composite_cvd_control_exclusion_events &lt;- list(cardio,cerebro,other_revas) %&gt;% bind_rows() Define control exclusion subject IDs ctrl_exclusion_ids_cvd &lt;- composite_cvd_control_exclusion_events$f.eid %&gt;% unique Phenotype time-to-event cvd_tte &lt;- phenotype_time_to_event(dm_firstoccur,cvd_firstoccur_ukb,demog, control_exclusion_ids = ctrl_exclusion_ids_cvd) saveRDS(cvd_tte,&quot;generated_data/cvd_tte.RDS&quot;) "],["tte-dr.html", "15 Generate time-to-event data for diabetic eye disease", " 15 Generate time-to-event data for diabetic eye disease Diabetes first occurrence event table (dm_firstoccur.RDS) and diabetic eye disease first occurrence event table (dr_firstoccur.RDS) were generated in phenotype_outcome_events_combine. Demographic data (demog_selected.RDS) was generated in prep_ukb_assessment. For diabetic eye disease, we apply the following exclusion criteria for controls and cases: controls are excluded if: represented in UKB diabetic eye disease control exclusion event table represented in non-diabetic eye disease event table controls must satisfy the following to not be excluded: represented in PCP data Subject IDs that were represented in the primary care data (gp_subject_ids.RDS) was created in prep_pcp_data. The following table shows control exclusion event table files and where they were generated: Control exclusion outcome file folder UKB eye disease control exclusion event table dr_control_exclusion_events_ukb.RDS phenotype_events_ukb Non-diabetic eye disease event table nondm_eye_disease_pc.RDS phenotype_events_pcp Applying these exclusion criteria to initial time-to-event data gives us the final time-to-event data for diabetic eye disease. library(tidyverse) library(data.table) source(&quot;functions.R&quot;) Load the following data sets: diabetes first occurrence data selected demographic data first occurrence DR event table dm_firstoccur &lt;- readRDS(&quot;generated_data/dm_firstoccur.RDS&quot;) demog &lt;- readRDS(&quot;generated_data/demog_selected.RDS&quot;) dr_firstoccur &lt;- readRDS(&quot;generated_data/dr_firstoccur.RDS&quot;) Load the following control exclusion event tables: DR control exclusion event table from UKB assessment center data non-diabeetic eye disease control exclusion event table from PCP data dr_control_exclusion_events_ukb &lt;- readRDS(&quot;generated_data/dr_control_exclusion_events_ukb.RDS&quot;) nondm_eye_disease &lt;- readRDS(&quot;generated_data/nondm_eye_disease_pc.RDS&quot;) Merge control exclusion event tables dr_control_exclusion_events &lt;- full_join(dr_control_exclusion_events_ukb,nondm_eye_disease,by=c(&quot;f.eid&quot;,&quot;event_dt&quot;)) Define control exclusion subject IDs ctrl_exclusion_ids &lt;- dr_control_exclusion_events$f.eid %&gt;% unique The controls should be represented in the primary care dataset gp_subejct_ids &lt;- readRDS(&quot;generated_data/gp_subject_ids.RDS&quot;) Define control inclusion subject IDs ctrl_inclusion_ids &lt;- gp_subejct_ids %&gt;% unique Phenotpe DR time-to-event table dr_tte &lt;- phenotype_time_to_event(dm_firstoccur,dr_firstoccur,demog, control_exclusion_ids = ctrl_exclusion_ids, control_inclusion_ids = ctrl_inclusion_ids) saveRDS(dr_tte,&quot;generated_data/dr_tte.RDS&quot;) "],["tte-dkd.html", "16 Generate time-to-event data for diabetes related kidney disease", " 16 Generate time-to-event data for diabetes related kidney disease Diabetes first occurrence event table (dm_firstoccur.RDS) and diabetic kidney disease first occurrence event table (dkd_firstoccur.RDS) were generated in phenotype_outcome_events_combine. Demographic data (demog_selected.RDS) was generated in prep_ukb_assessment. For CKD, we apply the following exclusion criteria for controls and cases: controls are excluded if: represented in UKB CKD control exclusion event table represented in PCP CKD control exclusion event table found to have microalbuminuria at least once found to have eGFR level &lt; 60 controls must satisfy all of the following to not be excluded: represented in PCP data have eGFR measurements available cases were excluded if: the follow-up time was less than 5 years Subject IDs that were represented in the primary care data (gp_subject_ids.RDS) was created in prep_pcp_data. The control exclusion based on microalbuminuria status and the eGFR measurements were accomplished based on corresponding biomarker datasets micro_macro_albuminuria_event_tab.RDS and comb_creat_tab.RDS, respectively, both generated in phenotype_biomarkers folder. The following table shows control exclusion event table files and where they were generated: Control exclusion outcome file folder UKB CKD control exclusion event table dkd_control_exclusion_events_ukb.RDS phenotype_events_ukb PCP CKD control exclusion event table kidney_disease_control_exclusion_pc.RDS phenotype_events_pcp microalbuminuria status micro_macro_albuminuria_event_tab.RDS phenotype_biomarkers/compute_acr_albuminuria eGFR measurements comb_creat_tab.RDS phenotype_biomarkers/compute_egfr Applying these exclusion criteria to initial time-to-event data gives us the final time-to-event data for diabetic kidney disease. library(tidyverse) library(data.table) source(&quot;functions.R&quot;) Load the following datasets: diabetes first occurrence data selected demographic data first occurrence DKD event table eGFR trajectory data microalbuminuria first occurrence event table dm_firstoccur &lt;- readRDS(&quot;generated_data/dm_firstoccur.RDS&quot;) demog &lt;- readRDS(&quot;generated_data/demog_selected.RDS&quot;) dkd_firstoccur &lt;- readRDS(&quot;generated_data/dkd_firstoccur.RDS&quot;) egfr_traj &lt;- readRDS(&quot;generated_data/trajectory_egfr.RDS&quot;) microabu_firstoccur &lt;- readRDS(&quot;generated_data/microabu_firstoccur.RDS&quot;) Load the following control exclusion event tables: CKD control exclusion event table from UKB assessment center data CKD control exclusion event table from PCP data dkd_control_exclusion_events_ukb &lt;- readRDS(&quot;generated_data/dkd_control_exclusion_events_ukb.RDS&quot;) kidney_disease_control_exclusion_events_pc &lt;- readRDS(&quot;generated_data/kidney_disease_control_exclusion_pc.RDS&quot;) Create additional control exclusion event tables: a table containing subjects who have been recorded to have ever had creatinine level less than 60 a table containing subjects who have been recorded to have ever had microalbuminuria egfr_lt60_ever_event_tab &lt;- egfr_traj %&gt;% filter(measurement &lt; 60, !is.na(measurement), !is.na(event_dt)) microabu_ever_event_tab &lt;- microabu_firstoccur %&gt;% filter(!is.na(event)) Merge control exclusion event tables ckd_control_exclusion_events &lt;- bind_rows(list(dkd_control_exclusion_events_ukb, kidney_disease_control_exclusion_events_pc, egfr_lt60_ever_event_tab,microabu_ever_event_tab)) Define control exclusion subject IDs ctrl_exclusion_ids &lt;- ckd_control_exclusion_events$f.eid %&gt;% unique The controls should have linked primary care dataset and at least one eGFR measurement pcp_subejct_ids &lt;- readRDS(&quot;generated_data/gp_subject_ids.RDS&quot;) eGFR_avail_subject_ids &lt;- (egfr_traj %&gt;% filter(!is.na(measurement) &amp; !is.na(event_dt))) %&gt;% .$f.eid Define control inclusion subject IDs ctrl_inclusion_ids &lt;- intersect(pcp_subejct_ids,eGFR_avail_subject_ids) %&gt;% unique dkd_tte &lt;- phenotype_time_to_event(dm_firstoccur,dkd_firstoccur,demog, control_exclusion_ids = ctrl_exclusion_ids, control_inclusion_ids = ctrl_inclusion_ids) We filter out cases that do not have 5+ follow-up time dkd_tte &lt;- dkd_tte %&gt;% filter(event == 0 | (event == 1 &amp; (lubridate::decimal_date(event_dt_comp) - lubridate::decimal_date(event_dt_dm) &gt;= 5))) saveRDS(dkd_tte,&quot;generated_data/dkd_tte.RDS&quot;) "],["appendix.html", "17 Appendix ", " 17 Appendix "],["input-and-output-file-summary.html", "17.1 Input and output file summary", " 17.1 Input and output file summary make-code-dictionary.Rmd Input files: read_v2_V2.csv, read_v3_V2.csv,tpp_local.txt Output files: full_dict.RDS "]]
