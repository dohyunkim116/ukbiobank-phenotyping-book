[["curate-demog-table.html", "2 Curate demographic table", " 2 Curate demographic table We curate demographic information such as the date of birth, age at the study initiation and censored date which will be used in defining time-to-event outcome. library(tidyverse) library(data.table) library(lubridate) Demographic data contain a number of fields. We are only interested in several of them and want to further define a few more fields that will be used later in generating time-to-event data. Load formatted raw demographic data demog &lt;- readRDS(&quot;generated_data/demog_UKB.RDS&quot;) Define the date of birth and gender demog &lt;- demog %&gt;% rename(YOB = f.34.0.0) %&gt;% rename(MOB = f.52.0.0) %&gt;% mutate(DOB = lubridate::make_date(YOB, MOB)) %&gt;% mutate(SEX = as.character(f.31.0.0)) Define UKB study initiation date demog &lt;- demog %&gt;% rename(date_init = f.53.0.0, date_repeat = f.53.1.0) Define administrative censoring date (study end date) based on inpatient record origin. These dates are updated periodically. The most recent censoring dates can be found here in the Showcase censoring date field of the table under the Hospital inpatient data section. The below censoring dates were based on the page accessed on Feb 22 2022. We will define dictionary that will be used to match hospital admission keys to admin censoring dates, and the mapping from country to administrative censoring date: Patient Episode Database for Wales (PEDW): Feb 28 2018 Scottish Morbidity Record (SMR): Jul 31 2021 Hospital Episode Statistics for England (HES): Sep 30 2021 censor_dates &lt;- c(PEDW = as.Date(&quot;2018-02-28&quot;), SMR = as.Date(&quot;2021-07-31&quot;), HES = as.Date(&quot;2021-09-30&quot;)) country_to_censor_date_mapping &lt;- c(wal = as.Date(&quot;2018-02-28&quot;), scot = as.Date(&quot;2021-07-31&quot;), eng = as.Date(&quot;2021-09-30&quot;)) demog &lt;- demog %&gt;% mutate(date_admin_censored = as.Date(pmin(censor_dates[f.40022.0.0], censor_dates[f.40022.0.1],censor_dates[f.40022.0.2],na.rm=T))) Note that there are subjects with unknown administrative censored date (i.e., no inpatient record). demog %&gt;% filter(is.na(date_admin_censored)) %&gt;% select(f.eid) %&gt;% nrow() ## [1] 61909 We will fill these values using the data field 54 of UKB assessment center data. These fields include which city each participant went in for assessment or imaging, and can indicate where we would expect their inpatient record to originate. Load the data containing the field 54. Patient eids are displayed as Inf for privacy reasons. bd &lt;- readRDS(&quot;generated_data/assessment_center_UKB.RDS&quot;) bd %&gt;% head() %&gt;% mutate(f.eid = Inf) ## f.eid f.54.0.0 f.54.1.0 f.54.2.0 f.54.3.0 ## 1 Inf 11005 NA NA NA ## 2 Inf 11021 NA NA NA ## 3 Inf 11020 NA NA NA ## 4 Inf 11006 NA NA NA ## 5 Inf 11011 NA NA NA ## 6 Inf 11017 NA NA NA The field f.54.0.0 contains codes indicating the city where the initial assessment was taken. We see that there is only one subject that is missing this value. rmid &lt;- bd %&gt;% filter(is.na(f.54.0.0)) rmid %&gt;% mutate(f.eid = Inf) ## f.eid f.54.0.0 f.54.1.0 f.54.2.0 f.54.3.0 ## 1 Inf NA NA NA NA This subject does exist in demographic table but all of the fields are missing except for the participants ID. demog %&gt;% right_join(rmid) %&gt;% as_vector() %&gt;% .[-1] %&gt;% is.na %&gt;% all ## [1] TRUE Remove this subject from the demographic table demog &lt;- demog %&gt;% anti_join(rmid) Now, we will use the values in the field f.54.0.0 to find out which city and in turn which country a participant went in for initial assessment. First, load the mapping file from city code to city name. code_to_city_mapping &lt;- read_tsv(&quot;raw_data/f.54.0.0_coding.tsv&quot;) Second, define the mapping from city name to country name. city_to_country_map &lt;- c(Glasgow = &quot;scot&quot;, Edinburgh = &quot;scot&quot;, Newcastle = &quot;eng&quot;, Middlesborough = &quot;eng&quot;, Leeds = &quot;eng&quot;, Sheffield = &quot;eng&quot;, Bury = &quot;eng&quot;, Liverpool = &quot;eng&quot;, Manchester = &quot;eng&quot;, &quot;Stockport (pilot)&quot; = &quot;eng&quot;, Stoke = &quot;eng&quot;, Nottingham = &quot;eng&quot;, Birmingham = &quot;eng&quot;, Oxford = &quot;eng&quot;, Reading = &quot;eng&quot;, Hounslow = &quot;eng&quot;, &quot;Central London&quot; = &quot;eng&quot;, Croydon = &quot;eng&quot;, Bristol = &quot;eng&quot;, Wrexham = &quot;wal&quot;, Swansea = &quot;wal&quot;, Cardiff = &quot;wal&quot;, Barts = &quot;eng&quot;) # hosptial in england Finally, using defined mappings, we fill in missing administrative censoring dates. demog &lt;- demog %&gt;% left_join(bd %&gt;% select(f.eid,`f.54.0.0`)) %&gt;% rename(coding = `f.54.0.0`) %&gt;% left_join(code_to_city_mapping, by = &quot;coding&quot;) %&gt;% mutate(country = city_to_country_map[meaning]) %&gt;% mutate(date_admin_censored = if_else(!is.na(date_admin_censored),date_admin_censored, country_to_censor_date_mapping[country])) attr(demog$date_admin_censored,&quot;names&quot;) &lt;- NULL Load reformatted raw ICD table ICD &lt;- readRDS(&quot;generated_data/ICD_UKB.RDS&quot;) Define: date of death date of lost-to-follow-up age at study initiation date age at second-visit date date censored date_death_tab &lt;- ICD %&gt;% select(f.eid, f.40000.0.0) %&gt;% arrange(f.eid) %&gt;% data.frame() demog &lt;- demog %&gt;% left_join(date_death_tab, by = &quot;f.eid&quot;) %&gt;% rename(date_death = &quot;f.40000.0.0&quot;) %&gt;% rename(date_lost_fu = &quot;f.191.0.0&quot;) demog &lt;- demog %&gt;% mutate(age_init = decimal_date(date_init) - decimal_date(DOB), age_repeat = decimal_date(date_repeat) - decimal_date(DOB)) %&gt;% mutate(date_censored = pmin(date_admin_censored,date_lost_fu,date_death,na.rm = T)) Select needed columns from demographic table demog_sel &lt;- demog %&gt;% select(f.eid,DOB,SEX, age_init,age_repeat, date_init,date_repeat, date_censored) Save demographic table. Note that this table includes subjects with genetic and reported sex mismatch saveRDS(demog_sel,&quot;generated_data/pre_demog_sel.RDS&quot;) "]]
